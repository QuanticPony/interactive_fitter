{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"itfit Work in progress...","title":"Overview"},{"location":"#itfit","text":"Work in progress...","title":"itfit"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2022 Unai Ler\u00eda Fortea & Pablo Vizca\u00edno Garc\u00eda Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"LICENSE"},{"location":"SUMMARY/","text":"reference itfit data data_classes data_selectors lasso fit_functions exponential gaussian generic_fitter linear quadratic fitter_app utils blit_manager collection exponential fit_container gaussian line point quadratic","title":"SUMMARY"},{"location":"reference/itfit/","text":"TODO","title":"Index"},{"location":"reference/itfit/fitter_app/","text":"","title":"Fitter app"},{"location":"reference/itfit/data/","text":"TODO","title":"Index"},{"location":"reference/itfit/data/data_classes/","text":"DataContainer Container for data. Source code in itfit/data/data_classes.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class DataContainer : \"\"\"Container for data. \"\"\" def __init__ ( self , xdata : list , ydata : list ): \"\"\"Creates a DataContainer. Parameters: xdata (List[float]): x data. ydata (List[float]): y data. \"\"\" self . xdata = np . array ( xdata ) . copy () self . ydata = np . array ( ydata ) . copy () def length ( self ): \"\"\"Returns lenght of data. Returns: (int): lenght of data. \"\"\" return self . xdata . size def get_data ( self ): \"\"\"Returns data. As list of tuples: `lenght x 2`. Returns: (Tuple[Tuple[float, float]]): Data stored. \"\"\" return np . array (( self . xdata , self . ydata )) . T __init__ ( xdata , ydata ) Creates a DataContainer. Parameters: Name Type Description Default xdata List [ float ] x data. required ydata List [ float ] y data. required Source code in itfit/data/data_classes.py 6 7 8 9 10 11 12 13 14 15 16 def __init__ ( self , xdata : list , ydata : list ): \"\"\"Creates a DataContainer. Parameters: xdata (List[float]): x data. ydata (List[float]): y data. \"\"\" self . xdata = np . array ( xdata ) . copy () self . ydata = np . array ( ydata ) . copy () get_data () Returns data. As list of tuples: lenght x 2 . Returns: Type Description Tuple [ Tuple [ float , float ]] Data stored. Source code in itfit/data/data_classes.py 27 28 29 30 31 32 33 34 def get_data ( self ): \"\"\"Returns data. As list of tuples: `lenght x 2`. Returns: (Tuple[Tuple[float, float]]): Data stored. \"\"\" return np . array (( self . xdata , self . ydata )) . T length () Returns lenght of data. Returns: Type Description int lenght of data. Source code in itfit/data/data_classes.py 18 19 20 21 22 23 24 25 def length ( self ): \"\"\"Returns lenght of data. Returns: (int): lenght of data. \"\"\" return self . xdata . size DataSelection Bases: DataContainer Source code in itfit/data/data_classes.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class DataSelection ( DataContainer ): def __init__ ( self , xdata , ydata ): super () . __init__ ( xdata , ydata ) self . indexes_used = np . ones ( len ( self . xdata ), dtype = bool ) # def __init__(self, data: DataContainer): # self = DataContainer # self.indexes_used = np.ones(len(self.xdata), dtype=bool) def select_all ( self ): \"\"\"Selects all data. \"\"\" self . indexes_used [:] = True def select_none ( self ): \"\"\"Unselect all data. \"\"\" self . indexes_used [:] = False def add_selection ( self , indexes : list ): \"\"\"Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [ np . array ( indexes )] = True def selection ( self , indexes ): \"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [:] = False self . add_selection ( indexes ) def bool_selection ( self , indexes_used ): \"\"\"Erase previous selected indexes. Sets new `indexes_used`. Parameters: indexes_used (List): List of booleans. True if index used, False otherwise. \"\"\" self . indexes_used [:] = indexes_used [:] def get_selected ( self ): \"\"\"Returns the selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y selected data in arrays. \"\"\" return self . xdata [ self . indexes_used ], self . ydata [ self . indexes_used ] def get_not_selected ( self ): \"\"\"Returns the not selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y not selected data in arrays. \"\"\" return self . xdata [ ~ self . indexes_used ], self . ydata [ ~ self . indexes_used ] def get_colors ( self , color_in , color_out ): \"\"\"Returns a list of colours depending if same index data is selected or not. Parameters: color_in (Tuple[float,float,float,float]): Colour for selected data. color_out (Tuple[float,float,float,float]): Colour for unselected data. Returns: (Tuple[Tuple[float,float,float,float]]): A list of colours. \"\"\" colors = np . zeros (( self . length (), 4 )) colors [ self . indexes_used ,:] = color_in [:] colors [ ~ self . indexes_used ,:] = color_out [:] return colors add_selection ( indexes ) Adds indexes to indexes_used . Parameters: Name Type Description Default indexes List List of index. required Source code in itfit/data/data_classes.py 56 57 58 59 60 61 62 63 def add_selection ( self , indexes : list ): \"\"\"Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [ np . array ( indexes )] = True bool_selection ( indexes_used ) Erase previous selected indexes. Sets new indexes_used . Parameters: Name Type Description Default indexes_used List List of booleans. True if index used, False otherwise. required Source code in itfit/data/data_classes.py 75 76 77 78 79 80 81 82 def bool_selection ( self , indexes_used ): \"\"\"Erase previous selected indexes. Sets new `indexes_used`. Parameters: indexes_used (List): List of booleans. True if index used, False otherwise. \"\"\" self . indexes_used [:] = indexes_used [:] get_colors ( color_in , color_out ) Returns a list of colours depending if same index data is selected or not. Parameters: Name Type Description Default color_in Tuple [ float , float , float , float ] Colour for selected data. required color_out Tuple [ float , float , float , float ] Colour for unselected data. required Returns: Type Description Tuple [ Tuple [ float , float , float , float ]] A list of colours. Source code in itfit/data/data_classes.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def get_colors ( self , color_in , color_out ): \"\"\"Returns a list of colours depending if same index data is selected or not. Parameters: color_in (Tuple[float,float,float,float]): Colour for selected data. color_out (Tuple[float,float,float,float]): Colour for unselected data. Returns: (Tuple[Tuple[float,float,float,float]]): A list of colours. \"\"\" colors = np . zeros (( self . length (), 4 )) colors [ self . indexes_used ,:] = color_in [:] colors [ ~ self . indexes_used ,:] = color_out [:] return colors get_not_selected () Returns the not selected data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Tuple containing x and y not selected data in arrays. Source code in itfit/data/data_classes.py 93 94 95 96 97 98 99 100 def get_not_selected ( self ): \"\"\"Returns the not selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y not selected data in arrays. \"\"\" return self . xdata [ ~ self . indexes_used ], self . ydata [ ~ self . indexes_used ] get_selected () Returns the selected data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Tuple containing x and y selected data in arrays. Source code in itfit/data/data_classes.py 84 85 86 87 88 89 90 91 def get_selected ( self ): \"\"\"Returns the selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y selected data in arrays. \"\"\" return self . xdata [ self . indexes_used ], self . ydata [ self . indexes_used ] select_all () Selects all data. Source code in itfit/data/data_classes.py 46 47 48 49 def select_all ( self ): \"\"\"Selects all data. \"\"\" self . indexes_used [:] = True select_none () Unselect all data. Source code in itfit/data/data_classes.py 51 52 53 54 def select_none ( self ): \"\"\"Unselect all data. \"\"\" self . indexes_used [:] = False selection ( indexes ) Erase previous selected indexes. Adds indexes to indexes_used . Parameters: Name Type Description Default indexes List List of index. required Source code in itfit/data/data_classes.py 65 66 67 68 69 70 71 72 73 def selection ( self , indexes ): \"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [:] = False self . add_selection ( indexes )","title":"Data classes"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer","text":"Container for data. Source code in itfit/data/data_classes.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class DataContainer : \"\"\"Container for data. \"\"\" def __init__ ( self , xdata : list , ydata : list ): \"\"\"Creates a DataContainer. Parameters: xdata (List[float]): x data. ydata (List[float]): y data. \"\"\" self . xdata = np . array ( xdata ) . copy () self . ydata = np . array ( ydata ) . copy () def length ( self ): \"\"\"Returns lenght of data. Returns: (int): lenght of data. \"\"\" return self . xdata . size def get_data ( self ): \"\"\"Returns data. As list of tuples: `lenght x 2`. Returns: (Tuple[Tuple[float, float]]): Data stored. \"\"\" return np . array (( self . xdata , self . ydata )) . T","title":"DataContainer"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.__init__","text":"Creates a DataContainer. Parameters: Name Type Description Default xdata List [ float ] x data. required ydata List [ float ] y data. required Source code in itfit/data/data_classes.py 6 7 8 9 10 11 12 13 14 15 16 def __init__ ( self , xdata : list , ydata : list ): \"\"\"Creates a DataContainer. Parameters: xdata (List[float]): x data. ydata (List[float]): y data. \"\"\" self . xdata = np . array ( xdata ) . copy () self . ydata = np . array ( ydata ) . copy ()","title":"__init__()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.get_data","text":"Returns data. As list of tuples: lenght x 2 . Returns: Type Description Tuple [ Tuple [ float , float ]] Data stored. Source code in itfit/data/data_classes.py 27 28 29 30 31 32 33 34 def get_data ( self ): \"\"\"Returns data. As list of tuples: `lenght x 2`. Returns: (Tuple[Tuple[float, float]]): Data stored. \"\"\" return np . array (( self . xdata , self . ydata )) . T","title":"get_data()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.length","text":"Returns lenght of data. Returns: Type Description int lenght of data. Source code in itfit/data/data_classes.py 18 19 20 21 22 23 24 25 def length ( self ): \"\"\"Returns lenght of data. Returns: (int): lenght of data. \"\"\" return self . xdata . size","title":"length()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection","text":"Bases: DataContainer Source code in itfit/data/data_classes.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class DataSelection ( DataContainer ): def __init__ ( self , xdata , ydata ): super () . __init__ ( xdata , ydata ) self . indexes_used = np . ones ( len ( self . xdata ), dtype = bool ) # def __init__(self, data: DataContainer): # self = DataContainer # self.indexes_used = np.ones(len(self.xdata), dtype=bool) def select_all ( self ): \"\"\"Selects all data. \"\"\" self . indexes_used [:] = True def select_none ( self ): \"\"\"Unselect all data. \"\"\" self . indexes_used [:] = False def add_selection ( self , indexes : list ): \"\"\"Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [ np . array ( indexes )] = True def selection ( self , indexes ): \"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [:] = False self . add_selection ( indexes ) def bool_selection ( self , indexes_used ): \"\"\"Erase previous selected indexes. Sets new `indexes_used`. Parameters: indexes_used (List): List of booleans. True if index used, False otherwise. \"\"\" self . indexes_used [:] = indexes_used [:] def get_selected ( self ): \"\"\"Returns the selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y selected data in arrays. \"\"\" return self . xdata [ self . indexes_used ], self . ydata [ self . indexes_used ] def get_not_selected ( self ): \"\"\"Returns the not selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y not selected data in arrays. \"\"\" return self . xdata [ ~ self . indexes_used ], self . ydata [ ~ self . indexes_used ] def get_colors ( self , color_in , color_out ): \"\"\"Returns a list of colours depending if same index data is selected or not. Parameters: color_in (Tuple[float,float,float,float]): Colour for selected data. color_out (Tuple[float,float,float,float]): Colour for unselected data. Returns: (Tuple[Tuple[float,float,float,float]]): A list of colours. \"\"\" colors = np . zeros (( self . length (), 4 )) colors [ self . indexes_used ,:] = color_in [:] colors [ ~ self . indexes_used ,:] = color_out [:] return colors","title":"DataSelection"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.add_selection","text":"Adds indexes to indexes_used . Parameters: Name Type Description Default indexes List List of index. required Source code in itfit/data/data_classes.py 56 57 58 59 60 61 62 63 def add_selection ( self , indexes : list ): \"\"\"Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [ np . array ( indexes )] = True","title":"add_selection()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.bool_selection","text":"Erase previous selected indexes. Sets new indexes_used . Parameters: Name Type Description Default indexes_used List List of booleans. True if index used, False otherwise. required Source code in itfit/data/data_classes.py 75 76 77 78 79 80 81 82 def bool_selection ( self , indexes_used ): \"\"\"Erase previous selected indexes. Sets new `indexes_used`. Parameters: indexes_used (List): List of booleans. True if index used, False otherwise. \"\"\" self . indexes_used [:] = indexes_used [:]","title":"bool_selection()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_colors","text":"Returns a list of colours depending if same index data is selected or not. Parameters: Name Type Description Default color_in Tuple [ float , float , float , float ] Colour for selected data. required color_out Tuple [ float , float , float , float ] Colour for unselected data. required Returns: Type Description Tuple [ Tuple [ float , float , float , float ]] A list of colours. Source code in itfit/data/data_classes.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def get_colors ( self , color_in , color_out ): \"\"\"Returns a list of colours depending if same index data is selected or not. Parameters: color_in (Tuple[float,float,float,float]): Colour for selected data. color_out (Tuple[float,float,float,float]): Colour for unselected data. Returns: (Tuple[Tuple[float,float,float,float]]): A list of colours. \"\"\" colors = np . zeros (( self . length (), 4 )) colors [ self . indexes_used ,:] = color_in [:] colors [ ~ self . indexes_used ,:] = color_out [:] return colors","title":"get_colors()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_not_selected","text":"Returns the not selected data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Tuple containing x and y not selected data in arrays. Source code in itfit/data/data_classes.py 93 94 95 96 97 98 99 100 def get_not_selected ( self ): \"\"\"Returns the not selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y not selected data in arrays. \"\"\" return self . xdata [ ~ self . indexes_used ], self . ydata [ ~ self . indexes_used ]","title":"get_not_selected()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_selected","text":"Returns the selected data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Tuple containing x and y selected data in arrays. Source code in itfit/data/data_classes.py 84 85 86 87 88 89 90 91 def get_selected ( self ): \"\"\"Returns the selected data. Returns: (Tuple[Tuple[float], Tuple[float]]): Tuple containing x and y selected data in arrays. \"\"\" return self . xdata [ self . indexes_used ], self . ydata [ self . indexes_used ]","title":"get_selected()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.select_all","text":"Selects all data. Source code in itfit/data/data_classes.py 46 47 48 49 def select_all ( self ): \"\"\"Selects all data. \"\"\" self . indexes_used [:] = True","title":"select_all()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.select_none","text":"Unselect all data. Source code in itfit/data/data_classes.py 51 52 53 54 def select_none ( self ): \"\"\"Unselect all data. \"\"\" self . indexes_used [:] = False","title":"select_none()"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.selection","text":"Erase previous selected indexes. Adds indexes to indexes_used . Parameters: Name Type Description Default indexes List List of index. required Source code in itfit/data/data_classes.py 65 66 67 68 69 70 71 72 73 def selection ( self , indexes ): \"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`. Parameters: indexes (List): List of index. \"\"\" self . indexes_used [:] = False self . add_selection ( indexes )","title":"selection()"},{"location":"reference/itfit/data_selectors/","text":"TODO","title":"Index"},{"location":"reference/itfit/data_selectors/lasso/","text":"LassoManager Source code in itfit/data_selectors/lasso.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class LassoManager : \"\"\" \"\"\" def __init__ ( self , app , data : DataSelection ): \"\"\"Creates a lasso selector and applies the selection to the given data. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . axes = app . ax self . canvas = self . axes . figure . canvas self . data = data self . Nxy = len ( data . xdata ) self . data . select_all () self . data . select_none () self . data_ploted = self . axes . plot ( data . xdata , data . ydata , color = ( 0 , 0 , 0 , 0 )) self . cid = self . canvas . mpl_connect ( 'button_press_event' , self . on_press ) self . collection_facecolors = self . data . get_colors ( ( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection = RegularPolyCollection ( 6 , sizes = ( 40 ,), facecolors = self . collection_facecolors , offsets = self . data . get_data (), offset_transform = self . axes . transData ) self . axes . add_collection ( self . collection ) def callback ( self , verts ): facecolors = self . collection . get_facecolors () # self.data_ploted.get_ p = path . Path ( verts ) ind = p . contains_points ( self . data . get_data ()) self . data . bool_selection ( ind ) facecolors = self . data . get_colors (( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection . set_facecolors ( facecolors ) self . delete () def delete ( self ): if hasattr ( self , \"lasso\" ): self . canvas . draw_idle () self . canvas . widgetlock . release ( self . lasso ) del self . lasso plt . disconnect ( self . cid ) self . cid = None def on_press ( self , event ): if self . canvas . widgetlock . locked (): return if event . inaxes is None : return self . lasso = Lasso ( event . inaxes , ( event . xdata , event . ydata ), self . callback ) # acquire a lock on the widget drawing self . canvas . widgetlock ( self . lasso ) __init__ ( app , data ) Creates a lasso selector and applies the selection to the given data. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to apply selection. required Source code in itfit/data_selectors/lasso.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , app , data : DataSelection ): \"\"\"Creates a lasso selector and applies the selection to the given data. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . axes = app . ax self . canvas = self . axes . figure . canvas self . data = data self . Nxy = len ( data . xdata ) self . data . select_all () self . data . select_none () self . data_ploted = self . axes . plot ( data . xdata , data . ydata , color = ( 0 , 0 , 0 , 0 )) self . cid = self . canvas . mpl_connect ( 'button_press_event' , self . on_press ) self . collection_facecolors = self . data . get_colors ( ( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection = RegularPolyCollection ( 6 , sizes = ( 40 ,), facecolors = self . collection_facecolors , offsets = self . data . get_data (), offset_transform = self . axes . transData ) self . axes . add_collection ( self . collection ) LassoTool Bases: ToolToggleBase Toggles Lasso Tool. Source code in itfit/data_selectors/lasso.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class LassoTool ( ToolToggleBase ): \"\"\"Toggles Lasso Tool.\"\"\" # default_keymap = '' description = 'Lasso me please' default_toggled = False radio_group = \"fitter\" def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a lasso tool. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . data = data super () . __init__ ( * args , ** kwargs ) def enable ( self , * args ): \"\"\"Enables the lasso tool. Interaction is locked until mouse button is released. \"\"\" self . lasso_manager = LassoManager ( self . app , self . data ) def disable ( self , * args ): \"\"\"Disables the lasso tool. After tool unselect or data selection applied. \"\"\" self . lasso_manager . delete () __init__ ( * args , app , data , ** kwargs ) Creates a lasso tool. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to apply selection. required Source code in itfit/data_selectors/lasso.py 87 88 89 90 91 92 93 94 95 96 97 98 def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a lasso tool. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . data = data super () . __init__ ( * args , ** kwargs ) disable ( * args ) Disables the lasso tool. After tool unselect or data selection applied. Source code in itfit/data_selectors/lasso.py 105 106 107 108 def disable ( self , * args ): \"\"\"Disables the lasso tool. After tool unselect or data selection applied. \"\"\" self . lasso_manager . delete () enable ( * args ) Enables the lasso tool. Interaction is locked until mouse button is released. Source code in itfit/data_selectors/lasso.py 100 101 102 103 def enable ( self , * args ): \"\"\"Enables the lasso tool. Interaction is locked until mouse button is released. \"\"\" self . lasso_manager = LassoManager ( self . app , self . data )","title":"Lasso"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoManager","text":"Source code in itfit/data_selectors/lasso.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class LassoManager : \"\"\" \"\"\" def __init__ ( self , app , data : DataSelection ): \"\"\"Creates a lasso selector and applies the selection to the given data. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . axes = app . ax self . canvas = self . axes . figure . canvas self . data = data self . Nxy = len ( data . xdata ) self . data . select_all () self . data . select_none () self . data_ploted = self . axes . plot ( data . xdata , data . ydata , color = ( 0 , 0 , 0 , 0 )) self . cid = self . canvas . mpl_connect ( 'button_press_event' , self . on_press ) self . collection_facecolors = self . data . get_colors ( ( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection = RegularPolyCollection ( 6 , sizes = ( 40 ,), facecolors = self . collection_facecolors , offsets = self . data . get_data (), offset_transform = self . axes . transData ) self . axes . add_collection ( self . collection ) def callback ( self , verts ): facecolors = self . collection . get_facecolors () # self.data_ploted.get_ p = path . Path ( verts ) ind = p . contains_points ( self . data . get_data ()) self . data . bool_selection ( ind ) facecolors = self . data . get_colors (( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection . set_facecolors ( facecolors ) self . delete () def delete ( self ): if hasattr ( self , \"lasso\" ): self . canvas . draw_idle () self . canvas . widgetlock . release ( self . lasso ) del self . lasso plt . disconnect ( self . cid ) self . cid = None def on_press ( self , event ): if self . canvas . widgetlock . locked (): return if event . inaxes is None : return self . lasso = Lasso ( event . inaxes , ( event . xdata , event . ydata ), self . callback ) # acquire a lock on the widget drawing self . canvas . widgetlock ( self . lasso )","title":"LassoManager"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoManager.__init__","text":"Creates a lasso selector and applies the selection to the given data. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to apply selection. required Source code in itfit/data_selectors/lasso.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , app , data : DataSelection ): \"\"\"Creates a lasso selector and applies the selection to the given data. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . axes = app . ax self . canvas = self . axes . figure . canvas self . data = data self . Nxy = len ( data . xdata ) self . data . select_all () self . data . select_none () self . data_ploted = self . axes . plot ( data . xdata , data . ydata , color = ( 0 , 0 , 0 , 0 )) self . cid = self . canvas . mpl_connect ( 'button_press_event' , self . on_press ) self . collection_facecolors = self . data . get_colors ( ( 0 , 1 , 0 , 1 ), ( 1 , 0 , 0 , 1 )) self . collection = RegularPolyCollection ( 6 , sizes = ( 40 ,), facecolors = self . collection_facecolors , offsets = self . data . get_data (), offset_transform = self . axes . transData ) self . axes . add_collection ( self . collection )","title":"__init__()"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool","text":"Bases: ToolToggleBase Toggles Lasso Tool. Source code in itfit/data_selectors/lasso.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 class LassoTool ( ToolToggleBase ): \"\"\"Toggles Lasso Tool.\"\"\" # default_keymap = '' description = 'Lasso me please' default_toggled = False radio_group = \"fitter\" def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a lasso tool. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . data = data super () . __init__ ( * args , ** kwargs ) def enable ( self , * args ): \"\"\"Enables the lasso tool. Interaction is locked until mouse button is released. \"\"\" self . lasso_manager = LassoManager ( self . app , self . data ) def disable ( self , * args ): \"\"\"Disables the lasso tool. After tool unselect or data selection applied. \"\"\" self . lasso_manager . delete ()","title":"LassoTool"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.__init__","text":"Creates a lasso tool. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to apply selection. required Source code in itfit/data_selectors/lasso.py 87 88 89 90 91 92 93 94 95 96 97 98 def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a lasso tool. Parameters: app (Fitter): Main application. data (DataSelection): Data to apply selection. \"\"\" self . app = app self . data = data super () . __init__ ( * args , ** kwargs )","title":"__init__()"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.disable","text":"Disables the lasso tool. After tool unselect or data selection applied. Source code in itfit/data_selectors/lasso.py 105 106 107 108 def disable ( self , * args ): \"\"\"Disables the lasso tool. After tool unselect or data selection applied. \"\"\" self . lasso_manager . delete ()","title":"disable()"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.enable","text":"Enables the lasso tool. Interaction is locked until mouse button is released. Source code in itfit/data_selectors/lasso.py 100 101 102 103 def enable ( self , * args ): \"\"\"Enables the lasso tool. Interaction is locked until mouse button is released. \"\"\" self . lasso_manager = LassoManager ( self . app , self . data )","title":"enable()"},{"location":"reference/itfit/fit_functions/","text":"TODO","title":"Index"},{"location":"reference/itfit/fit_functions/exponential/","text":"ExponentialFitter Bases: GenericFitter Exponential function fitter. Source code in itfit/fit_functions/exponential.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class ExponentialFitter ( GenericFitter ): \"\"\"Exponential function fitter.\"\"\" name = 'exponential' def __init__ ( self , app , data : DataSelection ): \"\"\" Exponential fitter following function `f(x) = a*exp(b*x)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.4 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.3 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragExponentialManager ( self . drag_points , self . app . blit_manager ) ## Connect Exponential to Points change events self . drag_points_cids = [] #Connection ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () __init__ ( app , data ) Exponential fitter following function f(x) = a*exp(b*x) Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/exponential.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\" Exponential fitter following function `f(x) = a*exp(b*x)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.4 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.3 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragExponentialManager ( self . drag_points , self . app . blit_manager ) ## Connect Exponential to Points change events self . drag_points_cids = [] #Connection ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () ExponentialTool Bases: GenericFitterTool Toggles Exponential Tool. Source code in itfit/fit_functions/exponential.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ExponentialTool ( GenericFitterTool ): \"\"\" Toggles Exponential Tool.\"\"\" # default_keymap = '' description = 'Exponentiate me please' default_toggled = False radio_group = 'fitter' def enable ( self , * args ): \"\"\"Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = ExponentialFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\" Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. \"\"\" super () . disable () disable ( * args ) Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. Source code in itfit/fit_functions/exponential.py 57 58 59 60 61 def disable ( self , * args ): \"\"\" Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. \"\"\" super () . disable () enable ( * args ) Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/exponential.py 50 51 52 53 54 55 def enable ( self , * args ): \"\"\"Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = ExponentialFitter ( self . app , self . data )","title":"Exponential"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialFitter","text":"Bases: GenericFitter Exponential function fitter. Source code in itfit/fit_functions/exponential.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class ExponentialFitter ( GenericFitter ): \"\"\"Exponential function fitter.\"\"\" name = 'exponential' def __init__ ( self , app , data : DataSelection ): \"\"\" Exponential fitter following function `f(x) = a*exp(b*x)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.4 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.3 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragExponentialManager ( self . drag_points , self . app . blit_manager ) ## Connect Exponential to Points change events self . drag_points_cids = [] #Connection ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"ExponentialFitter"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialFitter.__init__","text":"Exponential fitter following function f(x) = a*exp(b*x) Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/exponential.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\" Exponential fitter following function `f(x) = a*exp(b*x)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.4 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.3 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragExponentialManager ( self . drag_points , self . app . blit_manager ) ## Connect Exponential to Points change events self . drag_points_cids = [] #Connection ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"__init__()"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool","text":"Bases: GenericFitterTool Toggles Exponential Tool. Source code in itfit/fit_functions/exponential.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ExponentialTool ( GenericFitterTool ): \"\"\" Toggles Exponential Tool.\"\"\" # default_keymap = '' description = 'Exponentiate me please' default_toggled = False radio_group = 'fitter' def enable ( self , * args ): \"\"\"Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = ExponentialFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\" Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. \"\"\" super () . disable ()","title":"ExponentialTool"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool.disable","text":"Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. Source code in itfit/fit_functions/exponential.py 57 58 59 60 61 def disable ( self , * args ): \"\"\" Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager. \"\"\" super () . disable ()","title":"disable()"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool.enable","text":"Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/exponential.py 50 51 52 53 54 55 def enable ( self , * args ): \"\"\"Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = ExponentialFitter ( self . app , self . data )","title":"enable()"},{"location":"reference/itfit/fit_functions/gaussian/","text":"GaussianFitter Bases: GenericFitter Gaussian function fitter. Source code in itfit/fit_functions/gaussian.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class GaussianFitter ( GenericFitter ): \"\"\"Gaussian function fitter.\"\"\" name = 'gaussian' def __init__ ( self , app , data : DataSelection ): \"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.7 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.3 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragGaussianManager ( self . drag_points , self . app . blit_manager ) ##Connect Gaussian to Points change events self . drag_points_cids = [] #Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () __init__ ( app , data ) Gaussian fitter following function f(x) = A*exp(0.5*(x-m)^2/s^2) Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/gaussian.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.7 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.3 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragGaussianManager ( self . drag_points , self . app . blit_manager ) ##Connect Gaussian to Points change events self . drag_points_cids = [] #Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () GaussianTool Bases: GenericFitterTool Toggles Gaussian Tool. Source code in itfit/fit_functions/gaussian.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class GaussianTool ( GenericFitterTool ): \"\"\"Toggles Gaussian Tool.\"\"\" # default_keymap = '' description = 'Gauss me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = GaussianFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () disable ( * args ) Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/gaussian.py 58 59 60 61 62 63 def disable ( self , * args ): \"\"\"Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () enable ( * args ) Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/gaussian.py 50 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = GaussianFitter ( self . app , self . data )","title":"Gaussian"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianFitter","text":"Bases: GenericFitter Gaussian function fitter. Source code in itfit/fit_functions/gaussian.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class GaussianFitter ( GenericFitter ): \"\"\"Gaussian function fitter.\"\"\" name = 'gaussian' def __init__ ( self , app , data : DataSelection ): \"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.7 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.3 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragGaussianManager ( self . drag_points , self . app . blit_manager ) ##Connect Gaussian to Points change events self . drag_points_cids = [] #Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"GaussianFitter"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianFitter.__init__","text":"Gaussian fitter following function f(x) = A*exp(0.5*(x-m)^2/s^2) Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/gaussian.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.7 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.3 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragGaussianManager ( self . drag_points , self . app . blit_manager ) ##Connect Gaussian to Points change events self . drag_points_cids = [] #Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"__init__()"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool","text":"Bases: GenericFitterTool Toggles Gaussian Tool. Source code in itfit/fit_functions/gaussian.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class GaussianTool ( GenericFitterTool ): \"\"\"Toggles Gaussian Tool.\"\"\" # default_keymap = '' description = 'Gauss me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = GaussianFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"GaussianTool"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool.disable","text":"Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/gaussian.py 58 59 60 61 62 63 def disable ( self , * args ): \"\"\"Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"disable()"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool.enable","text":"Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/gaussian.py 50 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = GaussianFitter ( self . app , self . data )","title":"enable()"},{"location":"reference/itfit/fit_functions/generic_fitter/","text":"GenericFitter GenericFitter is a base implementation of a fit function. All fit functions must inherit GenericFitter. Source code in itfit/fit_functions/generic_fitter.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class GenericFitter : \"\"\"GenericFitter is a base implementation of a fit function. All fit functions must inherit GenericFitter.\"\"\" name = \"generic\" @staticmethod def function ( x , * args ): \"\"\"Fit function: `f(x,*args)=...`. Parameters: x (float): Independent variable. *args (list[float,...]): 0, 1 or multiple arguments. Returns: (Float): `f(x, *args)` \"\"\" ... def __init__ ( self , app , data : DataSelection ): \"\"\"Generic fitter constructor. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" self . app = app self . fig = app . figure self . ax = app . ax self . data = data self . fitter_drag_collection : DragPointCollection # TODO: this may change when dedicated ui is implemented self . button_axes = plt . axes ([ 0.81 , 0.000001 , 0.1 , 0.055 ]) self . button = Button ( self . button_axes , \"Fit\" , color = \"red\" ) self . button . on_clicked ( self . on_fit ) def get_args ( self ): \"\"\"Return arguments needed for `self.function`. Returns: (Tuple[float]): 0, 1 or multiple arguments. \"\"\" return self . fitter_drag_collection . get_args () def on_fit ( self , event ): \"\"\"Event for fit button. Parameters: event (Matplotlib event): Not used \"\"\" # If there is not data selected use all data xdata , ydata = self . data . get_selected () if np . sum ( self . data . indexes_used ) == 0 : xdata , ydata = self . data . xdata . copy (), self . data . ydata . copy () self . fit = optimize . curve_fit ( self . fitter_drag_collection . function , xdata , ydata , p0 = self . get_args (), full_output = True ) fit_result = FitResultContainer ( DataContainer ( xdata , ydata ), self , self . fit ) # Plot fit line in background with self . app . blit_manager . disabled (): self . fit_line = Line2D ( xdata , self . fitter_drag_collection . function ( xdata , * self . fit [ 0 ]), linestyle = '--' ) self . ax . add_artist ( self . fit_line ) #TODO: not sure what to do with legends # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\") # self.ax.legend() self . ax . draw_artist ( self . fit_line ) # Redraw plot to show line self . app . blit_manager . draw () # Save fit in app self . app . fits . update ({ f \" { self . name } - { np . random . randint ( 0 , 100 ) } \" : fit_result }) def delete ( self ): \"\"\"Remove trigger. Used when tool is disabled.\"\"\" try : del self . button self . button_axes . remove () # Remove artists in order to clean canvas for pm in self . drag_points_managers : pm . dragpoint . remove () self . app . blit_manager . artists . remove ( pm ) self . fitter_drag_collection . remove () self . app . blit_manager . artists . remove ( self . fitter_drag_collection ) except AttributeError : pass __init__ ( app , data ) Generic fitter constructor. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/generic_fitter.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __init__ ( self , app , data : DataSelection ): \"\"\"Generic fitter constructor. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" self . app = app self . fig = app . figure self . ax = app . ax self . data = data self . fitter_drag_collection : DragPointCollection # TODO: this may change when dedicated ui is implemented self . button_axes = plt . axes ([ 0.81 , 0.000001 , 0.1 , 0.055 ]) self . button = Button ( self . button_axes , \"Fit\" , color = \"red\" ) self . button . on_clicked ( self . on_fit ) delete () Remove trigger. Used when tool is disabled. Source code in itfit/fit_functions/generic_fitter.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def delete ( self ): \"\"\"Remove trigger. Used when tool is disabled.\"\"\" try : del self . button self . button_axes . remove () # Remove artists in order to clean canvas for pm in self . drag_points_managers : pm . dragpoint . remove () self . app . blit_manager . artists . remove ( pm ) self . fitter_drag_collection . remove () self . app . blit_manager . artists . remove ( self . fitter_drag_collection ) except AttributeError : pass function ( x , * args ) staticmethod Fit function: f(x,*args)=... . Parameters: Name Type Description Default x float Independent variable. required *args list [ float , ...] 0, 1 or multiple arguments. () Returns: Type Description Float f(x, *args) Source code in itfit/fit_functions/generic_fitter.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @staticmethod def function ( x , * args ): \"\"\"Fit function: `f(x,*args)=...`. Parameters: x (float): Independent variable. *args (list[float,...]): 0, 1 or multiple arguments. Returns: (Float): `f(x, *args)` \"\"\" ... get_args () Return arguments needed for self.function . Returns: Type Description Tuple [ float ] 0, 1 or multiple arguments. Source code in itfit/fit_functions/generic_fitter.py 53 54 55 56 57 58 59 60 def get_args ( self ): \"\"\"Return arguments needed for `self.function`. Returns: (Tuple[float]): 0, 1 or multiple arguments. \"\"\" return self . fitter_drag_collection . get_args () on_fit ( event ) Event for fit button. Parameters: Name Type Description Default event Matplotlib event Not used required Source code in itfit/fit_functions/generic_fitter.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def on_fit ( self , event ): \"\"\"Event for fit button. Parameters: event (Matplotlib event): Not used \"\"\" # If there is not data selected use all data xdata , ydata = self . data . get_selected () if np . sum ( self . data . indexes_used ) == 0 : xdata , ydata = self . data . xdata . copy (), self . data . ydata . copy () self . fit = optimize . curve_fit ( self . fitter_drag_collection . function , xdata , ydata , p0 = self . get_args (), full_output = True ) fit_result = FitResultContainer ( DataContainer ( xdata , ydata ), self , self . fit ) # Plot fit line in background with self . app . blit_manager . disabled (): self . fit_line = Line2D ( xdata , self . fitter_drag_collection . function ( xdata , * self . fit [ 0 ]), linestyle = '--' ) self . ax . add_artist ( self . fit_line ) #TODO: not sure what to do with legends # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\") # self.ax.legend() self . ax . draw_artist ( self . fit_line ) # Redraw plot to show line self . app . blit_manager . draw () # Save fit in app self . app . fits . update ({ f \" { self . name } - { np . random . randint ( 0 , 100 ) } \" : fit_result }) GenericFitterTool Bases: ToolToggleBase Toggles Generic Fitter Tool. Source code in itfit/fit_functions/generic_fitter.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 class GenericFitterTool ( ToolToggleBase ): \"\"\"Toggles Generic Fitter Tool.\"\"\" def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a GenericFitterTool. Parameters: app (Fitter): Main application. data (DataSelection): Data selected. \"\"\" self . app = app self . data = data self . fitter : GenericFitter super () . __init__ ( * args , ** kwargs ) def enable ( self , * args ): \"\"\"Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" self . app . blit_manager . enable () def disable ( self , * args ): \"\"\"Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" self . fitter . delete () self . app . blit_manager . disable () self . app . figure . canvas . draw_idle () __init__ ( * args , app , data , ** kwargs ) Creates a GenericFitterTool. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data selected. required Source code in itfit/fit_functions/generic_fitter.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a GenericFitterTool. Parameters: app (Fitter): Main application. data (DataSelection): Data selected. \"\"\" self . app = app self . data = data self . fitter : GenericFitter super () . __init__ ( * args , ** kwargs ) disable ( * args ) Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/generic_fitter.py 137 138 139 140 141 142 143 def disable ( self , * args ): \"\"\"Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" self . fitter . delete () self . app . blit_manager . disable () self . app . figure . canvas . draw_idle () enable ( * args ) Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/generic_fitter.py 131 132 133 134 135 def enable ( self , * args ): \"\"\"Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" self . app . blit_manager . enable ()","title":"Generic fitter"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter","text":"GenericFitter is a base implementation of a fit function. All fit functions must inherit GenericFitter. Source code in itfit/fit_functions/generic_fitter.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class GenericFitter : \"\"\"GenericFitter is a base implementation of a fit function. All fit functions must inherit GenericFitter.\"\"\" name = \"generic\" @staticmethod def function ( x , * args ): \"\"\"Fit function: `f(x,*args)=...`. Parameters: x (float): Independent variable. *args (list[float,...]): 0, 1 or multiple arguments. Returns: (Float): `f(x, *args)` \"\"\" ... def __init__ ( self , app , data : DataSelection ): \"\"\"Generic fitter constructor. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" self . app = app self . fig = app . figure self . ax = app . ax self . data = data self . fitter_drag_collection : DragPointCollection # TODO: this may change when dedicated ui is implemented self . button_axes = plt . axes ([ 0.81 , 0.000001 , 0.1 , 0.055 ]) self . button = Button ( self . button_axes , \"Fit\" , color = \"red\" ) self . button . on_clicked ( self . on_fit ) def get_args ( self ): \"\"\"Return arguments needed for `self.function`. Returns: (Tuple[float]): 0, 1 or multiple arguments. \"\"\" return self . fitter_drag_collection . get_args () def on_fit ( self , event ): \"\"\"Event for fit button. Parameters: event (Matplotlib event): Not used \"\"\" # If there is not data selected use all data xdata , ydata = self . data . get_selected () if np . sum ( self . data . indexes_used ) == 0 : xdata , ydata = self . data . xdata . copy (), self . data . ydata . copy () self . fit = optimize . curve_fit ( self . fitter_drag_collection . function , xdata , ydata , p0 = self . get_args (), full_output = True ) fit_result = FitResultContainer ( DataContainer ( xdata , ydata ), self , self . fit ) # Plot fit line in background with self . app . blit_manager . disabled (): self . fit_line = Line2D ( xdata , self . fitter_drag_collection . function ( xdata , * self . fit [ 0 ]), linestyle = '--' ) self . ax . add_artist ( self . fit_line ) #TODO: not sure what to do with legends # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\") # self.ax.legend() self . ax . draw_artist ( self . fit_line ) # Redraw plot to show line self . app . blit_manager . draw () # Save fit in app self . app . fits . update ({ f \" { self . name } - { np . random . randint ( 0 , 100 ) } \" : fit_result }) def delete ( self ): \"\"\"Remove trigger. Used when tool is disabled.\"\"\" try : del self . button self . button_axes . remove () # Remove artists in order to clean canvas for pm in self . drag_points_managers : pm . dragpoint . remove () self . app . blit_manager . artists . remove ( pm ) self . fitter_drag_collection . remove () self . app . blit_manager . artists . remove ( self . fitter_drag_collection ) except AttributeError : pass","title":"GenericFitter"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.__init__","text":"Generic fitter constructor. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/generic_fitter.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __init__ ( self , app , data : DataSelection ): \"\"\"Generic fitter constructor. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" self . app = app self . fig = app . figure self . ax = app . ax self . data = data self . fitter_drag_collection : DragPointCollection # TODO: this may change when dedicated ui is implemented self . button_axes = plt . axes ([ 0.81 , 0.000001 , 0.1 , 0.055 ]) self . button = Button ( self . button_axes , \"Fit\" , color = \"red\" ) self . button . on_clicked ( self . on_fit )","title":"__init__()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.delete","text":"Remove trigger. Used when tool is disabled. Source code in itfit/fit_functions/generic_fitter.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def delete ( self ): \"\"\"Remove trigger. Used when tool is disabled.\"\"\" try : del self . button self . button_axes . remove () # Remove artists in order to clean canvas for pm in self . drag_points_managers : pm . dragpoint . remove () self . app . blit_manager . artists . remove ( pm ) self . fitter_drag_collection . remove () self . app . blit_manager . artists . remove ( self . fitter_drag_collection ) except AttributeError : pass","title":"delete()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.function","text":"Fit function: f(x,*args)=... . Parameters: Name Type Description Default x float Independent variable. required *args list [ float , ...] 0, 1 or multiple arguments. () Returns: Type Description Float f(x, *args) Source code in itfit/fit_functions/generic_fitter.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @staticmethod def function ( x , * args ): \"\"\"Fit function: `f(x,*args)=...`. Parameters: x (float): Independent variable. *args (list[float,...]): 0, 1 or multiple arguments. Returns: (Float): `f(x, *args)` \"\"\" ...","title":"function()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.get_args","text":"Return arguments needed for self.function . Returns: Type Description Tuple [ float ] 0, 1 or multiple arguments. Source code in itfit/fit_functions/generic_fitter.py 53 54 55 56 57 58 59 60 def get_args ( self ): \"\"\"Return arguments needed for `self.function`. Returns: (Tuple[float]): 0, 1 or multiple arguments. \"\"\" return self . fitter_drag_collection . get_args ()","title":"get_args()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.on_fit","text":"Event for fit button. Parameters: Name Type Description Default event Matplotlib event Not used required Source code in itfit/fit_functions/generic_fitter.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def on_fit ( self , event ): \"\"\"Event for fit button. Parameters: event (Matplotlib event): Not used \"\"\" # If there is not data selected use all data xdata , ydata = self . data . get_selected () if np . sum ( self . data . indexes_used ) == 0 : xdata , ydata = self . data . xdata . copy (), self . data . ydata . copy () self . fit = optimize . curve_fit ( self . fitter_drag_collection . function , xdata , ydata , p0 = self . get_args (), full_output = True ) fit_result = FitResultContainer ( DataContainer ( xdata , ydata ), self , self . fit ) # Plot fit line in background with self . app . blit_manager . disabled (): self . fit_line = Line2D ( xdata , self . fitter_drag_collection . function ( xdata , * self . fit [ 0 ]), linestyle = '--' ) self . ax . add_artist ( self . fit_line ) #TODO: not sure what to do with legends # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\") # self.ax.legend() self . ax . draw_artist ( self . fit_line ) # Redraw plot to show line self . app . blit_manager . draw () # Save fit in app self . app . fits . update ({ f \" { self . name } - { np . random . randint ( 0 , 100 ) } \" : fit_result })","title":"on_fit()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool","text":"Bases: ToolToggleBase Toggles Generic Fitter Tool. Source code in itfit/fit_functions/generic_fitter.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 class GenericFitterTool ( ToolToggleBase ): \"\"\"Toggles Generic Fitter Tool.\"\"\" def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a GenericFitterTool. Parameters: app (Fitter): Main application. data (DataSelection): Data selected. \"\"\" self . app = app self . data = data self . fitter : GenericFitter super () . __init__ ( * args , ** kwargs ) def enable ( self , * args ): \"\"\"Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" self . app . blit_manager . enable () def disable ( self , * args ): \"\"\"Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" self . fitter . delete () self . app . blit_manager . disable () self . app . figure . canvas . draw_idle ()","title":"GenericFitterTool"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.__init__","text":"Creates a GenericFitterTool. Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data selected. required Source code in itfit/fit_functions/generic_fitter.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def __init__ ( self , * args , app , data : DataSelection , ** kwargs ): \"\"\"Creates a GenericFitterTool. Parameters: app (Fitter): Main application. data (DataSelection): Data selected. \"\"\" self . app = app self . data = data self . fitter : GenericFitter super () . __init__ ( * args , ** kwargs )","title":"__init__()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.disable","text":"Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/generic_fitter.py 137 138 139 140 141 142 143 def disable ( self , * args ): \"\"\"Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" self . fitter . delete () self . app . blit_manager . disable () self . app . figure . canvas . draw_idle ()","title":"disable()"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.enable","text":"Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/generic_fitter.py 131 132 133 134 135 def enable ( self , * args ): \"\"\"Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" self . app . blit_manager . enable ()","title":"enable()"},{"location":"reference/itfit/fit_functions/linear/","text":"LineFitter Bases: GenericFitter Linear function fitter. Source code in itfit/fit_functions/linear.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class LineFitter ( GenericFitter ): \"\"\"Linear function fitter.\"\"\" name = 'linear' def __init__ ( self , app , data : DataSelection ): \"\"\"Linear fitter following function `f(x)=m*x + n`. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.2 , 0.3 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.8 , 0.7 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragLineManager ( self . drag_points , self . app . blit_manager ) ## Connect Line to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () __init__ ( app , data ) Linear fitter following function f(x)=m*x + n . Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/linear.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\"Linear fitter following function `f(x)=m*x + n`. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.2 , 0.3 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.8 , 0.7 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragLineManager ( self . drag_points , self . app . blit_manager ) ## Connect Line to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () LineTool Bases: GenericFitterTool Toggles Line Tool. Source code in itfit/fit_functions/linear.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class LineTool ( GenericFitterTool ): \"\"\"Toggles Line Tool.\"\"\" # default_keymap = '' description = 'Line me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = LineFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () disable ( * args ) Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/linear.py 58 59 60 61 62 def disable ( self , * args ): \"\"\"Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () enable ( * args ) Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/linear.py 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = LineFitter ( self . app , self . data )","title":"Linear"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineFitter","text":"Bases: GenericFitter Linear function fitter. Source code in itfit/fit_functions/linear.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class LineFitter ( GenericFitter ): \"\"\"Linear function fitter.\"\"\" name = 'linear' def __init__ ( self , app , data : DataSelection ): \"\"\"Linear fitter following function `f(x)=m*x + n`. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.2 , 0.3 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.8 , 0.7 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragLineManager ( self . drag_points , self . app . blit_manager ) ## Connect Line to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"LineFitter"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineFitter.__init__","text":"Linear fitter following function f(x)=m*x + n . Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/linear.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\"Linear fitter following function `f(x)=m*x + n`. Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.2 , 0.3 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.8 , 0.7 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragLineManager ( self . drag_points , self . app . blit_manager ) ## Connect Line to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"__init__()"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool","text":"Bases: GenericFitterTool Toggles Line Tool. Source code in itfit/fit_functions/linear.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class LineTool ( GenericFitterTool ): \"\"\"Toggles Line Tool.\"\"\" # default_keymap = '' description = 'Line me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = LineFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"LineTool"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool.disable","text":"Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/linear.py 58 59 60 61 62 def disable ( self , * args ): \"\"\"Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"disable()"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool.enable","text":"Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/linear.py 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = LineFitter ( self . app , self . data )","title":"enable()"},{"location":"reference/itfit/fit_functions/quadratic/","text":"QuadraticFitter Bases: GenericFitter Quadratic function fitter. Source code in itfit/fit_functions/quadratic.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class QuadraticFitter ( GenericFitter ): \"\"\"Quadratic function fitter.\"\"\" name = 'quadratic' def __init__ ( self , app , data : DataSelection ): \"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragQuadraticManager ( self . drag_points , self . app . blit_manager ) ## Connect Quadratic to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () __init__ ( app , data ) Quadratic fitter following function f(x)=a*x^2 + b*x + c Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/quadratic.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragQuadraticManager ( self . drag_points , self . app . blit_manager ) ## Connect Quadratic to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle () QuadraticTool Bases: GenericFitterTool Toggles Quadratic Tool. Source code in itfit/fit_functions/quadratic.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class QuadraticTool ( GenericFitterTool ): \"\"\"Toggles Quadratic Tool.\"\"\" # default_keymap = '' description = 'Quadratic me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = QuadraticFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () disable ( * args ) Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/quadratic.py 58 59 60 61 62 def disable ( self , * args ): \"\"\"Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable () enable ( * args ) Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/quadratic.py 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = QuadraticFitter ( self . app , self . data )","title":"Quadratic"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticFitter","text":"Bases: GenericFitter Quadratic function fitter. Source code in itfit/fit_functions/quadratic.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class QuadraticFitter ( GenericFitter ): \"\"\"Quadratic function fitter.\"\"\" name = 'quadratic' def __init__ ( self , app , data : DataSelection ): \"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragQuadraticManager ( self . drag_points , self . app . blit_manager ) ## Connect Quadratic to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"QuadraticFitter"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticFitter.__init__","text":"Quadratic fitter following function f(x)=a*x^2 + b*x + c Parameters: Name Type Description Default app Fitter Main application. required data DataSelection Data to fit. required Source code in itfit/fit_functions/quadratic.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , app , data : DataSelection ): \"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c` Parameters: app (Fitter): Main application. data (DataSelection): Data to fit. \"\"\" super () . __init__ ( app , data ) ## Create DragPoints and DragLines needed self . drag_points = [ DragPoint ( * self . ax . transAxes . transform (( 0.5 , 0.2 )), None ), DragPoint ( * self . ax . transAxes . transform (( 0.7 , 0.5 )), None )] self . drag_points_managers = [ DragPointManager ( p , self . app . blit_manager ) for p in self . drag_points ] self . fitter_drag_collection = DragQuadraticManager ( self . drag_points , self . app . blit_manager ) ## Connect Quadratic to Points change events self . drag_points_cids = [] # Connections ids for change events for dp in self . drag_points_managers : self . drag_points_cids . append ( dp . connect ( self . fitter_drag_collection . update ) ) ## Add created DragPoints and DragLines to BlitManager's artists self . app . blit_manager . artists . append ( self . fitter_drag_collection ) for dpm in self . drag_points_managers : self . app . blit_manager . artists . append ( dpm ) self . fig . canvas . draw_idle ()","title":"__init__()"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool","text":"Bases: GenericFitterTool Toggles Quadratic Tool. Source code in itfit/fit_functions/quadratic.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class QuadraticTool ( GenericFitterTool ): \"\"\"Toggles Quadratic Tool.\"\"\" # default_keymap = '' description = 'Quadratic me please' default_toggled = False radio_group = \"fitter\" def enable ( self , * args ): \"\"\"Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = QuadraticFitter ( self . app , self . data ) def disable ( self , * args ): \"\"\"Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"QuadraticTool"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool.disable","text":"Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. Source code in itfit/fit_functions/quadratic.py 58 59 60 61 62 def disable ( self , * args ): \"\"\"Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager. \"\"\" super () . disable ()","title":"disable()"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool.enable","text":"Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. Source code in itfit/fit_functions/quadratic.py 51 52 53 54 55 56 def enable ( self , * args ): \"\"\"Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects. \"\"\" super () . enable () self . fitter = QuadraticFitter ( self . app , self . data )","title":"enable()"},{"location":"reference/itfit/utils/","text":"TODO","title":"Index"},{"location":"reference/itfit/utils/blit_manager/","text":"BlitManager Do not use this class unless you know what blitting is and you are familiar with the rest of the code. Source code in itfit/utils/blit_manager.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class BlitManager : \"\"\"**Do not use this class unless you know what blitting is and you are familiar with the rest of the code.**\"\"\" def __init__ ( self , app ): \"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`. BlitManager must be manualy enabled and disabled. `with` statements can be used to enable or disable blitting temporaly. Parameters: app (Fitter): Aplication using BlitManager. \"\"\" self . app = app self . ax = app . ax self . canvas = app . figure . canvas self . artists = [] self . _enabled_ = False self . background = None self . draw_event_connection_id = None def get_background ( self ): \"\"\"\"Gets current background and saves it, used in blitting process.\"\"\" for a in self . artists : a . poly . set_visible ( False ) for a in self . ax . artists : self . ax . draw_artists ( a ) self . canvas . blit () return self . canvas . copy_from_bbox ( self . ax . bbox ) def update_background ( self ): \"\"\"Updates saved background, used in blitting process.\"\"\" self . background = self . get_background () def draw ( self , artists_visible = True ): \"\"\"Draws the canvas using blitting.\"\"\" self . canvas . restore_region ( self . background ) for a in self . artists : try : # if custom object a . poly . set_visible ( artists_visible ) self . ax . draw_artist ( a . poly ) except AttributeError : # if matplotlib artists a . set_visible ( artists_visible ) self . ax . draw_artis ( a ) self . canvas . blit ( self . ax . bbox ) def on_draw ( self , event ): \"\"\"Trigger for draw event.\"\"\" self . draw () def enable ( self ): \"\"\"Enables BlitManager.\"\"\" if not self . _enabled_ : self . update_background () self . _enabled_ = True self . draw_event_connection_id = self . canvas . mpl_connect ( 'draw_event' , self . on_draw ) def disable ( self ): \"\"\"Disables BlitManager.\"\"\" if self . _enabled_ : self . _enabled_ = False self . canvas . mpl_disconnect ( self . draw_event_connection_id ) self . draw_event_connection_id = None def enabled ( self ): \"\"\"Enables Blit Manager and returns itself.\"\"\" self . enable () return self def disabled ( self ): \"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\" self . disable () self . draw ( artists_visible = False ) return self def __enter__ ( self , * _ ): pass def __exit__ ( self , * _ ): if not self . _enabled_ : self . enable () else : self . disable () __init__ ( app ) Class for managing blitting. DragObjects must be appended to self.artists . BlitManager must be manualy enabled and disabled. with statements can be used to enable or disable blitting temporaly. Parameters: Name Type Description Default app Fitter Aplication using BlitManager. required Source code in itfit/utils/blit_manager.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def __init__ ( self , app ): \"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`. BlitManager must be manualy enabled and disabled. `with` statements can be used to enable or disable blitting temporaly. Parameters: app (Fitter): Aplication using BlitManager. \"\"\" self . app = app self . ax = app . ax self . canvas = app . figure . canvas self . artists = [] self . _enabled_ = False self . background = None self . draw_event_connection_id = None disable () Disables BlitManager. Source code in itfit/utils/blit_manager.py 64 65 66 67 68 69 def disable ( self ): \"\"\"Disables BlitManager.\"\"\" if self . _enabled_ : self . _enabled_ = False self . canvas . mpl_disconnect ( self . draw_event_connection_id ) self . draw_event_connection_id = None disabled () Disables BlitManager, redraws without DragObjects and returns itself. Source code in itfit/utils/blit_manager.py 76 77 78 79 80 def disabled ( self ): \"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\" self . disable () self . draw ( artists_visible = False ) return self draw ( artists_visible = True ) Draws the canvas using blitting. Source code in itfit/utils/blit_manager.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def draw ( self , artists_visible = True ): \"\"\"Draws the canvas using blitting.\"\"\" self . canvas . restore_region ( self . background ) for a in self . artists : try : # if custom object a . poly . set_visible ( artists_visible ) self . ax . draw_artist ( a . poly ) except AttributeError : # if matplotlib artists a . set_visible ( artists_visible ) self . ax . draw_artis ( a ) self . canvas . blit ( self . ax . bbox ) enable () Enables BlitManager. Source code in itfit/utils/blit_manager.py 57 58 59 60 61 62 def enable ( self ): \"\"\"Enables BlitManager.\"\"\" if not self . _enabled_ : self . update_background () self . _enabled_ = True self . draw_event_connection_id = self . canvas . mpl_connect ( 'draw_event' , self . on_draw ) enabled () Enables Blit Manager and returns itself. Source code in itfit/utils/blit_manager.py 71 72 73 74 def enabled ( self ): \"\"\"Enables Blit Manager and returns itself.\"\"\" self . enable () return self get_background () \"Gets current background and saves it, used in blitting process. Source code in itfit/utils/blit_manager.py 23 24 25 26 27 28 29 30 31 32 33 def get_background ( self ): \"\"\"\"Gets current background and saves it, used in blitting process.\"\"\" for a in self . artists : a . poly . set_visible ( False ) for a in self . ax . artists : self . ax . draw_artists ( a ) self . canvas . blit () return self . canvas . copy_from_bbox ( self . ax . bbox ) on_draw ( event ) Trigger for draw event. Source code in itfit/utils/blit_manager.py 53 54 55 def on_draw ( self , event ): \"\"\"Trigger for draw event.\"\"\" self . draw () update_background () Updates saved background, used in blitting process. Source code in itfit/utils/blit_manager.py 35 36 37 def update_background ( self ): \"\"\"Updates saved background, used in blitting process.\"\"\" self . background = self . get_background ()","title":"Blit manager"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager","text":"Do not use this class unless you know what blitting is and you are familiar with the rest of the code. Source code in itfit/utils/blit_manager.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class BlitManager : \"\"\"**Do not use this class unless you know what blitting is and you are familiar with the rest of the code.**\"\"\" def __init__ ( self , app ): \"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`. BlitManager must be manualy enabled and disabled. `with` statements can be used to enable or disable blitting temporaly. Parameters: app (Fitter): Aplication using BlitManager. \"\"\" self . app = app self . ax = app . ax self . canvas = app . figure . canvas self . artists = [] self . _enabled_ = False self . background = None self . draw_event_connection_id = None def get_background ( self ): \"\"\"\"Gets current background and saves it, used in blitting process.\"\"\" for a in self . artists : a . poly . set_visible ( False ) for a in self . ax . artists : self . ax . draw_artists ( a ) self . canvas . blit () return self . canvas . copy_from_bbox ( self . ax . bbox ) def update_background ( self ): \"\"\"Updates saved background, used in blitting process.\"\"\" self . background = self . get_background () def draw ( self , artists_visible = True ): \"\"\"Draws the canvas using blitting.\"\"\" self . canvas . restore_region ( self . background ) for a in self . artists : try : # if custom object a . poly . set_visible ( artists_visible ) self . ax . draw_artist ( a . poly ) except AttributeError : # if matplotlib artists a . set_visible ( artists_visible ) self . ax . draw_artis ( a ) self . canvas . blit ( self . ax . bbox ) def on_draw ( self , event ): \"\"\"Trigger for draw event.\"\"\" self . draw () def enable ( self ): \"\"\"Enables BlitManager.\"\"\" if not self . _enabled_ : self . update_background () self . _enabled_ = True self . draw_event_connection_id = self . canvas . mpl_connect ( 'draw_event' , self . on_draw ) def disable ( self ): \"\"\"Disables BlitManager.\"\"\" if self . _enabled_ : self . _enabled_ = False self . canvas . mpl_disconnect ( self . draw_event_connection_id ) self . draw_event_connection_id = None def enabled ( self ): \"\"\"Enables Blit Manager and returns itself.\"\"\" self . enable () return self def disabled ( self ): \"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\" self . disable () self . draw ( artists_visible = False ) return self def __enter__ ( self , * _ ): pass def __exit__ ( self , * _ ): if not self . _enabled_ : self . enable () else : self . disable ()","title":"BlitManager"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.__init__","text":"Class for managing blitting. DragObjects must be appended to self.artists . BlitManager must be manualy enabled and disabled. with statements can be used to enable or disable blitting temporaly. Parameters: Name Type Description Default app Fitter Aplication using BlitManager. required Source code in itfit/utils/blit_manager.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def __init__ ( self , app ): \"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`. BlitManager must be manualy enabled and disabled. `with` statements can be used to enable or disable blitting temporaly. Parameters: app (Fitter): Aplication using BlitManager. \"\"\" self . app = app self . ax = app . ax self . canvas = app . figure . canvas self . artists = [] self . _enabled_ = False self . background = None self . draw_event_connection_id = None","title":"__init__()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.disable","text":"Disables BlitManager. Source code in itfit/utils/blit_manager.py 64 65 66 67 68 69 def disable ( self ): \"\"\"Disables BlitManager.\"\"\" if self . _enabled_ : self . _enabled_ = False self . canvas . mpl_disconnect ( self . draw_event_connection_id ) self . draw_event_connection_id = None","title":"disable()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.disabled","text":"Disables BlitManager, redraws without DragObjects and returns itself. Source code in itfit/utils/blit_manager.py 76 77 78 79 80 def disabled ( self ): \"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\" self . disable () self . draw ( artists_visible = False ) return self","title":"disabled()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.draw","text":"Draws the canvas using blitting. Source code in itfit/utils/blit_manager.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def draw ( self , artists_visible = True ): \"\"\"Draws the canvas using blitting.\"\"\" self . canvas . restore_region ( self . background ) for a in self . artists : try : # if custom object a . poly . set_visible ( artists_visible ) self . ax . draw_artist ( a . poly ) except AttributeError : # if matplotlib artists a . set_visible ( artists_visible ) self . ax . draw_artis ( a ) self . canvas . blit ( self . ax . bbox )","title":"draw()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.enable","text":"Enables BlitManager. Source code in itfit/utils/blit_manager.py 57 58 59 60 61 62 def enable ( self ): \"\"\"Enables BlitManager.\"\"\" if not self . _enabled_ : self . update_background () self . _enabled_ = True self . draw_event_connection_id = self . canvas . mpl_connect ( 'draw_event' , self . on_draw )","title":"enable()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.enabled","text":"Enables Blit Manager and returns itself. Source code in itfit/utils/blit_manager.py 71 72 73 74 def enabled ( self ): \"\"\"Enables Blit Manager and returns itself.\"\"\" self . enable () return self","title":"enabled()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.get_background","text":"\"Gets current background and saves it, used in blitting process. Source code in itfit/utils/blit_manager.py 23 24 25 26 27 28 29 30 31 32 33 def get_background ( self ): \"\"\"\"Gets current background and saves it, used in blitting process.\"\"\" for a in self . artists : a . poly . set_visible ( False ) for a in self . ax . artists : self . ax . draw_artists ( a ) self . canvas . blit () return self . canvas . copy_from_bbox ( self . ax . bbox )","title":"get_background()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.on_draw","text":"Trigger for draw event. Source code in itfit/utils/blit_manager.py 53 54 55 def on_draw ( self , event ): \"\"\"Trigger for draw event.\"\"\" self . draw ()","title":"on_draw()"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.update_background","text":"Updates saved background, used in blitting process. Source code in itfit/utils/blit_manager.py 35 36 37 def update_background ( self ): \"\"\"Updates saved background, used in blitting process.\"\"\" self . background = self . get_background ()","title":"update_background()"},{"location":"reference/itfit/utils/collection/","text":"DragPointCollection A collection of DragPoints used to implement complex interactive functions. All collections of DragPoints must inherit from DragPointCollection and implement the following methods: function: f(x, *args) that returns a float. update: updates DragPointCollection.poly with DragPointCollection.dragpoints positions. get_args: returns arguments needed for function ( *args ). Must be derived from DragPointCollection.dragpoints positions. Source code in itfit/utils/collection.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class DragPointCollection : \"\"\"A collection of DragPoints used to implement complex interactive functions. All collections of DragPoints must inherit from DragPointCollection and implement the following methods: * function: `f(x, *args)` that returns a float. * update: updates `DragPointCollection.poly` with `DragPointCollection.dragpoints` positions. * get_args: returns arguments needed for function (`*args`). Must be derived from `DragPointCollection.dragpoints` positions. \"\"\" @staticmethod def function ( * args , ** kargs ): ... def update ( self , * args , ** kargs ): ... def get_args ( self ): ... # Common methods def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Collection of DragPoints. Used to implement more complicated DragObjects. Args: dragpoints (list[DragPoint]): collection vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoints = dragpoints self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . poly = Line2D ( self . get_xdata_display (), self . get_ydata_display (), linestyle = '-' , color = 'red' , transform = None ) self . patch = self . blit_manager . ax . add_patch ( self . poly ) def get_xy ( self , * args ): \"\"\"Applies and returns correct transformation from display to data coordinates. Parameters: *args (List[float,float] | List[List[float,float],...]): Coordinates from display. Returns: (Tuple[float,float] | Tuple[Tuple[float,float],...]): Coordinates from data. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . inverted () . transform ( args ) def set_xy ( self , * args ): \"\"\"Applies and returns correct transformation from data coordinates to display. Parameters: *args (List[float] | List[List[float,float]]): Coordinates from data. Returns: (Tuple[float] | Tuple[Tuple[float,float]]): Coordinates from display. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . transform ( args ) def get_xdata_display ( self ): \"\"\"Gets xdata from DragPoints in display coordinates. Returns: (Tuple[float]): x in display coordinates. \"\"\" return [ p . get_center ()[ 0 ] for p in self . dragpoints ] def get_ydata_display ( self ): \"\"\"Gets ydata from DragPoints in display coordinates. Returns: (Tuple[float]): y in display coordinates. \"\"\" return [ p . get_center ()[ 1 ] for p in self . dragpoints ] def get_xdata ( self ): \"\"\"Gets xdata from DragPoints in data coordinates. Returns: (Tuple[float]): x in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 0 ] for p in self . dragpoints ] def get_ydata ( self ): \"\"\"Gets ydata from DragPoints in data coordinates. Returns: (Tuple[float]): y in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 1 ] for p in self . dragpoints ] def remove ( self ): \"\"\"Removes the patch from the axes.\"\"\" self . patch . remove () __init__ ( dragpoints , blit_manager ) Collection of DragPoints. Used to implement more complicated DragObjects. Parameters: Name Type Description Default dragpoints list [ DragPoint ] collection vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/collection.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Collection of DragPoints. Used to implement more complicated DragObjects. Args: dragpoints (list[DragPoint]): collection vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoints = dragpoints self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . poly = Line2D ( self . get_xdata_display (), self . get_ydata_display (), linestyle = '-' , color = 'red' , transform = None ) self . patch = self . blit_manager . ax . add_patch ( self . poly ) get_xdata () Gets xdata from DragPoints in data coordinates. Returns: Type Description Tuple [ float ] x in data coordinates. Source code in itfit/utils/collection.py 90 91 92 93 94 95 96 97 def get_xdata ( self ): \"\"\"Gets xdata from DragPoints in data coordinates. Returns: (Tuple[float]): x in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 0 ] for p in self . dragpoints ] get_xdata_display () Gets xdata from DragPoints in display coordinates. Returns: Type Description Tuple [ float ] x in display coordinates. Source code in itfit/utils/collection.py 71 72 73 74 75 76 77 78 79 def get_xdata_display ( self ): \"\"\"Gets xdata from DragPoints in display coordinates. Returns: (Tuple[float]): x in display coordinates. \"\"\" return [ p . get_center ()[ 0 ] for p in self . dragpoints ] get_xy ( * args ) Applies and returns correct transformation from display to data coordinates. Parameters: Name Type Description Default *args List [ float , float ] | List [ List [ float , float ], ...] Coordinates from display. () Returns: Type Description Tuple [ float , float ] | Tuple [ Tuple [ float , float ], ...] Coordinates from data. Source code in itfit/utils/collection.py 44 45 46 47 48 49 50 51 52 53 54 55 56 def get_xy ( self , * args ): \"\"\"Applies and returns correct transformation from display to data coordinates. Parameters: *args (List[float,float] | List[List[float,float],...]): Coordinates from display. Returns: (Tuple[float,float] | Tuple[Tuple[float,float],...]): Coordinates from data. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . inverted () . transform ( args ) get_ydata () Gets ydata from DragPoints in data coordinates. Returns: Type Description Tuple [ float ] y in data coordinates. Source code in itfit/utils/collection.py 99 100 101 102 103 104 105 106 def get_ydata ( self ): \"\"\"Gets ydata from DragPoints in data coordinates. Returns: (Tuple[float]): y in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 1 ] for p in self . dragpoints ] get_ydata_display () Gets ydata from DragPoints in display coordinates. Returns: Type Description Tuple [ float ] y in display coordinates. Source code in itfit/utils/collection.py 81 82 83 84 85 86 87 88 def get_ydata_display ( self ): \"\"\"Gets ydata from DragPoints in display coordinates. Returns: (Tuple[float]): y in display coordinates. \"\"\" return [ p . get_center ()[ 1 ] for p in self . dragpoints ] remove () Removes the patch from the axes. Source code in itfit/utils/collection.py 108 109 110 def remove ( self ): \"\"\"Removes the patch from the axes.\"\"\" self . patch . remove () set_xy ( * args ) Applies and returns correct transformation from data coordinates to display. Parameters: Name Type Description Default *args List [ float ] | List [ List [ float , float ]] Coordinates from data. () Returns: Type Description Tuple [ float ] | Tuple [ Tuple [ float , float ]] Coordinates from display. Source code in itfit/utils/collection.py 58 59 60 61 62 63 64 65 66 67 68 69 def set_xy ( self , * args ): \"\"\"Applies and returns correct transformation from data coordinates to display. Parameters: *args (List[float] | List[List[float,float]]): Coordinates from data. Returns: (Tuple[float] | Tuple[Tuple[float,float]]): Coordinates from display. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . transform ( args )","title":"Collection"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection","text":"A collection of DragPoints used to implement complex interactive functions. All collections of DragPoints must inherit from DragPointCollection and implement the following methods: function: f(x, *args) that returns a float. update: updates DragPointCollection.poly with DragPointCollection.dragpoints positions. get_args: returns arguments needed for function ( *args ). Must be derived from DragPointCollection.dragpoints positions. Source code in itfit/utils/collection.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class DragPointCollection : \"\"\"A collection of DragPoints used to implement complex interactive functions. All collections of DragPoints must inherit from DragPointCollection and implement the following methods: * function: `f(x, *args)` that returns a float. * update: updates `DragPointCollection.poly` with `DragPointCollection.dragpoints` positions. * get_args: returns arguments needed for function (`*args`). Must be derived from `DragPointCollection.dragpoints` positions. \"\"\" @staticmethod def function ( * args , ** kargs ): ... def update ( self , * args , ** kargs ): ... def get_args ( self ): ... # Common methods def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Collection of DragPoints. Used to implement more complicated DragObjects. Args: dragpoints (list[DragPoint]): collection vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoints = dragpoints self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . poly = Line2D ( self . get_xdata_display (), self . get_ydata_display (), linestyle = '-' , color = 'red' , transform = None ) self . patch = self . blit_manager . ax . add_patch ( self . poly ) def get_xy ( self , * args ): \"\"\"Applies and returns correct transformation from display to data coordinates. Parameters: *args (List[float,float] | List[List[float,float],...]): Coordinates from display. Returns: (Tuple[float,float] | Tuple[Tuple[float,float],...]): Coordinates from data. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . inverted () . transform ( args ) def set_xy ( self , * args ): \"\"\"Applies and returns correct transformation from data coordinates to display. Parameters: *args (List[float] | List[List[float,float]]): Coordinates from data. Returns: (Tuple[float] | Tuple[Tuple[float,float]]): Coordinates from display. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . transform ( args ) def get_xdata_display ( self ): \"\"\"Gets xdata from DragPoints in display coordinates. Returns: (Tuple[float]): x in display coordinates. \"\"\" return [ p . get_center ()[ 0 ] for p in self . dragpoints ] def get_ydata_display ( self ): \"\"\"Gets ydata from DragPoints in display coordinates. Returns: (Tuple[float]): y in display coordinates. \"\"\" return [ p . get_center ()[ 1 ] for p in self . dragpoints ] def get_xdata ( self ): \"\"\"Gets xdata from DragPoints in data coordinates. Returns: (Tuple[float]): x in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 0 ] for p in self . dragpoints ] def get_ydata ( self ): \"\"\"Gets ydata from DragPoints in data coordinates. Returns: (Tuple[float]): y in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 1 ] for p in self . dragpoints ] def remove ( self ): \"\"\"Removes the patch from the axes.\"\"\" self . patch . remove ()","title":"DragPointCollection"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.__init__","text":"Collection of DragPoints. Used to implement more complicated DragObjects. Parameters: Name Type Description Default dragpoints list [ DragPoint ] collection vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/collection.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Collection of DragPoints. Used to implement more complicated DragObjects. Args: dragpoints (list[DragPoint]): collection vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoints = dragpoints self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . poly = Line2D ( self . get_xdata_display (), self . get_ydata_display (), linestyle = '-' , color = 'red' , transform = None ) self . patch = self . blit_manager . ax . add_patch ( self . poly )","title":"__init__()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xdata","text":"Gets xdata from DragPoints in data coordinates. Returns: Type Description Tuple [ float ] x in data coordinates. Source code in itfit/utils/collection.py 90 91 92 93 94 95 96 97 def get_xdata ( self ): \"\"\"Gets xdata from DragPoints in data coordinates. Returns: (Tuple[float]): x in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 0 ] for p in self . dragpoints ]","title":"get_xdata()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xdata_display","text":"Gets xdata from DragPoints in display coordinates. Returns: Type Description Tuple [ float ] x in display coordinates. Source code in itfit/utils/collection.py 71 72 73 74 75 76 77 78 79 def get_xdata_display ( self ): \"\"\"Gets xdata from DragPoints in display coordinates. Returns: (Tuple[float]): x in display coordinates. \"\"\" return [ p . get_center ()[ 0 ] for p in self . dragpoints ]","title":"get_xdata_display()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xy","text":"Applies and returns correct transformation from display to data coordinates. Parameters: Name Type Description Default *args List [ float , float ] | List [ List [ float , float ], ...] Coordinates from display. () Returns: Type Description Tuple [ float , float ] | Tuple [ Tuple [ float , float ], ...] Coordinates from data. Source code in itfit/utils/collection.py 44 45 46 47 48 49 50 51 52 53 54 55 56 def get_xy ( self , * args ): \"\"\"Applies and returns correct transformation from display to data coordinates. Parameters: *args (List[float,float] | List[List[float,float],...]): Coordinates from display. Returns: (Tuple[float,float] | Tuple[Tuple[float,float],...]): Coordinates from data. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . inverted () . transform ( args )","title":"get_xy()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_ydata","text":"Gets ydata from DragPoints in data coordinates. Returns: Type Description Tuple [ float ] y in data coordinates. Source code in itfit/utils/collection.py 99 100 101 102 103 104 105 106 def get_ydata ( self ): \"\"\"Gets ydata from DragPoints in data coordinates. Returns: (Tuple[float]): y in data coordinates. \"\"\" return [ self . get_xy ( * p . get_center ())[ 1 ] for p in self . dragpoints ]","title":"get_ydata()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_ydata_display","text":"Gets ydata from DragPoints in display coordinates. Returns: Type Description Tuple [ float ] y in display coordinates. Source code in itfit/utils/collection.py 81 82 83 84 85 86 87 88 def get_ydata_display ( self ): \"\"\"Gets ydata from DragPoints in display coordinates. Returns: (Tuple[float]): y in display coordinates. \"\"\" return [ p . get_center ()[ 1 ] for p in self . dragpoints ]","title":"get_ydata_display()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.remove","text":"Removes the patch from the axes. Source code in itfit/utils/collection.py 108 109 110 def remove ( self ): \"\"\"Removes the patch from the axes.\"\"\" self . patch . remove ()","title":"remove()"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.set_xy","text":"Applies and returns correct transformation from data coordinates to display. Parameters: Name Type Description Default *args List [ float ] | List [ List [ float , float ]] Coordinates from data. () Returns: Type Description Tuple [ float ] | Tuple [ Tuple [ float , float ]] Coordinates from display. Source code in itfit/utils/collection.py 58 59 60 61 62 63 64 65 66 67 68 69 def set_xy ( self , * args ): \"\"\"Applies and returns correct transformation from data coordinates to display. Parameters: *args (List[float] | List[List[float,float]]): Coordinates from data. Returns: (Tuple[float] | Tuple[Tuple[float,float]]): Coordinates from display. \"\"\" args = args if len ( args ) == 2 else args [ 0 ] return self . ax . transData . transform ( args )","title":"set_xy()"},{"location":"reference/itfit/utils/exponential/","text":"DragExponentialManager Bases: DragPointCollection Collection of DragPoints representing a straight line. Source code in itfit/utils/exponential.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class DragExponentialManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a straight line.\"\"\" @staticmethod def function ( x , a , b ): \"\"\"Exponential function. Parameters: x (float): independent variable. a (float): scales exponential function. b (float): scales x. Returns: (float): `f(x) = a*exp(b*x)` \"\"\" return a * np . exp ( b * x ) def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Exponential line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . point_1 = self . dragpoints [ 0 ] self . point_2 = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" p1_x , p2_x = self . get_xdata () a , b = self . get_args () #create x and y data of exponential line of an exponential that moves across two poitns dx = abs ( p1_x - p2_x ) * 1.5 x = np . linspace ( min ( p1_x , p2_x ) - dx , max ( p1_x , p2_x ) + dx , 250 ) y = self . function ( x , a , b ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives exponential function parameters. Returns: (Tuple[float,float]): `a`, and `b` of `f(x) = a*exp(b*x)` \"\"\" p1_x , p1_y = self . get_xy ( * self . point_1 . patch . get_center ()) p2_x , p2_y = self . get_xy ( * self . point_2 . patch . get_center ()) b = 1 / ( p1_x - p2_x ) * np . log ( p1_y / p2_y ) a = p1_y / np . exp ( b * p1_x ) return a , b __init__ ( dragpoints , blit_manager ) Exponential line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automatic ploting. required Source code in itfit/utils/exponential.py 27 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Exponential line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . point_1 = self . dragpoints [ 0 ] self . point_2 = self . dragpoints [ 1 ] self . update () function ( x , a , b ) staticmethod Exponential function. Parameters: Name Type Description Default x float independent variable. required a float scales exponential function. required b float scales x. required Returns: Type Description float f(x) = a*exp(b*x) Source code in itfit/utils/exponential.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @staticmethod def function ( x , a , b ): \"\"\"Exponential function. Parameters: x (float): independent variable. a (float): scales exponential function. b (float): scales x. Returns: (float): `f(x) = a*exp(b*x)` \"\"\" return a * np . exp ( b * x ) get_args () Gives exponential function parameters. Returns: Type Description Tuple [ float , float ] a , and b of f(x) = a*exp(b*x) Source code in itfit/utils/exponential.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def get_args ( self ): \"\"\"Gives exponential function parameters. Returns: (Tuple[float,float]): `a`, and `b` of `f(x) = a*exp(b*x)` \"\"\" p1_x , p1_y = self . get_xy ( * self . point_1 . patch . get_center ()) p2_x , p2_y = self . get_xy ( * self . point_2 . patch . get_center ()) b = 1 / ( p1_x - p2_x ) * np . log ( p1_y / p2_y ) a = p1_y / np . exp ( b * p1_x ) return a , b update ( * args , ** kargs ) Updates line data with DragObjects positions Source code in itfit/utils/exponential.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" p1_x , p2_x = self . get_xdata () a , b = self . get_args () #create x and y data of exponential line of an exponential that moves across two poitns dx = abs ( p1_x - p2_x ) * 1.5 x = np . linspace ( min ( p1_x , p2_x ) - dx , max ( p1_x , p2_x ) + dx , 250 ) y = self . function ( x , a , b ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"Exponential"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager","text":"Bases: DragPointCollection Collection of DragPoints representing a straight line. Source code in itfit/utils/exponential.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class DragExponentialManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a straight line.\"\"\" @staticmethod def function ( x , a , b ): \"\"\"Exponential function. Parameters: x (float): independent variable. a (float): scales exponential function. b (float): scales x. Returns: (float): `f(x) = a*exp(b*x)` \"\"\" return a * np . exp ( b * x ) def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Exponential line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . point_1 = self . dragpoints [ 0 ] self . point_2 = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" p1_x , p2_x = self . get_xdata () a , b = self . get_args () #create x and y data of exponential line of an exponential that moves across two poitns dx = abs ( p1_x - p2_x ) * 1.5 x = np . linspace ( min ( p1_x , p2_x ) - dx , max ( p1_x , p2_x ) + dx , 250 ) y = self . function ( x , a , b ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives exponential function parameters. Returns: (Tuple[float,float]): `a`, and `b` of `f(x) = a*exp(b*x)` \"\"\" p1_x , p1_y = self . get_xy ( * self . point_1 . patch . get_center ()) p2_x , p2_y = self . get_xy ( * self . point_2 . patch . get_center ()) b = 1 / ( p1_x - p2_x ) * np . log ( p1_y / p2_y ) a = p1_y / np . exp ( b * p1_x ) return a , b","title":"DragExponentialManager"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.__init__","text":"Exponential line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automatic ploting. required Source code in itfit/utils/exponential.py 27 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Exponential line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . point_1 = self . dragpoints [ 0 ] self . point_2 = self . dragpoints [ 1 ] self . update ()","title":"__init__()"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.function","text":"Exponential function. Parameters: Name Type Description Default x float independent variable. required a float scales exponential function. required b float scales x. required Returns: Type Description float f(x) = a*exp(b*x) Source code in itfit/utils/exponential.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @staticmethod def function ( x , a , b ): \"\"\"Exponential function. Parameters: x (float): independent variable. a (float): scales exponential function. b (float): scales x. Returns: (float): `f(x) = a*exp(b*x)` \"\"\" return a * np . exp ( b * x )","title":"function()"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.get_args","text":"Gives exponential function parameters. Returns: Type Description Tuple [ float , float ] a , and b of f(x) = a*exp(b*x) Source code in itfit/utils/exponential.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def get_args ( self ): \"\"\"Gives exponential function parameters. Returns: (Tuple[float,float]): `a`, and `b` of `f(x) = a*exp(b*x)` \"\"\" p1_x , p1_y = self . get_xy ( * self . point_1 . patch . get_center ()) p2_x , p2_y = self . get_xy ( * self . point_2 . patch . get_center ()) b = 1 / ( p1_x - p2_x ) * np . log ( p1_y / p2_y ) a = p1_y / np . exp ( b * p1_x ) return a , b","title":"get_args()"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.update","text":"Updates line data with DragObjects positions Source code in itfit/utils/exponential.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" p1_x , p2_x = self . get_xdata () a , b = self . get_args () #create x and y data of exponential line of an exponential that moves across two poitns dx = abs ( p1_x - p2_x ) * 1.5 x = np . linspace ( min ( p1_x , p2_x ) - dx , max ( p1_x , p2_x ) + dx , 250 ) y = self . function ( x , a , b ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"update()"},{"location":"reference/itfit/utils/fit_container/","text":"FitResultContainer Source code in itfit/utils/fit_container.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class FitResultContainer : def __init__ ( self , data , fit_manager , scipy_result ): \"\"\"_summary_ Parameters: data (DataContainer): Data fitted. fit_manager (GenericFitter): Fit function used scipy_result (dict): Dictionary of `scipy.optimize.curve_fit` output. \"\"\" self . data = data self . function = fit_manager . function self . fit_manager = fit_manager self . scipy_output = { \"popt\" : scipy_result [ 0 ], \"pcov\" : scipy_result [ 1 ], \"fvec\" : scipy_result [ 2 ][ \"fvec\" ], \"nfev\" : scipy_result [ 2 ][ \"nfev\" ], \"fjac\" : scipy_result [ 2 ][ \"fjac\" ], \"ipvt\" : scipy_result [ 2 ][ \"ipvt\" ], \"qtf\" : scipy_result [ 2 ][ \"qtf\" ], \"mesg\" : scipy_result [ 3 ], \"ier\" : scipy_result [ 4 ] } def get_parameters ( self ): \"\"\"Gets the optimal fitting parameters found. Returns: (Tuple[float]): Tuple of parameters. \"\"\" return self . scipy_output [ \"popt\" ] def get_parameters_covariance ( self ): \"\"\"Gets the parameters covariance matrix. Returns: (Ndarray(NxN)[float]): Parameters covariance matrix. \"\"\" return self . scipy_output [ \"pcov\" ] def get_parameters_errors ( self ): \"\"\"Gets the square root of diagonal elements of the covariance matrix. Returns: (Tuple[float]): Optimal fitting parameters standard error. \"\"\" return np . sqrt ( np . diag ( self . get_parameters_covariance ())) def get_xdata ( self ): \"\"\"Gets the x component of the data used. Returns: (Tuple[float]): X component of data used. \"\"\" return self . data . xdata def get_ydata ( self ): \"\"\"Gets the y component of the data used. Returns: (Tuple[float]): Y component of data used. \"\"\" return self . data . ydata def get_data ( self ): \"\"\"Gets the data used. Returns: (Tuple[Tuple[float], Tuple[float]]): Data used. \"\"\" return self . data . get_data () def get_fit_xdata ( self ): \"\"\"Gets the x component of the fit curve. Equal to get_xdata output. Returns: (Tuple[float]): X component of fit curve. Equal to get_xdata output. \"\"\" return self . get_xdata () def get_fit_ydata ( self ): \"\"\"Gets the y coomponent of the fit curve. Returns: (Tuple[float]): Y component of fit curve. \"\"\" return self . get_ydata () + self . scipy_output [ \"fvec\" ] def get_fit_data ( self ): \"\"\"Gets the fit curve data. Returns: (Tuple[Tuple[float], Tuple[float]]): Fit curve data. \"\"\" return np . array (( self . get_fit_xdata (), self . get_fit_ydata ())) . T def get_message ( self ): \"\"\"Gets scipy output `mesg` output. Returns: (str): Scipy output message. \"\"\" return self . scipy_output [ \"mesg\" ] def evaluate ( self , x ): \"\"\"Evaluates the given `x` in the fitting function with the optimal parameters. Parameters: x (float): Independent variable. Returns: y (float): Dependent variable. \"\"\" return self . function ( x , * self . get_parameters ()) def save ( self , filename ): # TODO: ... @classmethod def load ( cls , filename ): # TODO: ... __init__ ( data , fit_manager , scipy_result ) summary Parameters: Name Type Description Default data DataContainer Data fitted. required fit_manager GenericFitter Fit function used required scipy_result dict Dictionary of scipy.optimize.curve_fit output. required Source code in itfit/utils/fit_container.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , data , fit_manager , scipy_result ): \"\"\"_summary_ Parameters: data (DataContainer): Data fitted. fit_manager (GenericFitter): Fit function used scipy_result (dict): Dictionary of `scipy.optimize.curve_fit` output. \"\"\" self . data = data self . function = fit_manager . function self . fit_manager = fit_manager self . scipy_output = { \"popt\" : scipy_result [ 0 ], \"pcov\" : scipy_result [ 1 ], \"fvec\" : scipy_result [ 2 ][ \"fvec\" ], \"nfev\" : scipy_result [ 2 ][ \"nfev\" ], \"fjac\" : scipy_result [ 2 ][ \"fjac\" ], \"ipvt\" : scipy_result [ 2 ][ \"ipvt\" ], \"qtf\" : scipy_result [ 2 ][ \"qtf\" ], \"mesg\" : scipy_result [ 3 ], \"ier\" : scipy_result [ 4 ] } evaluate ( x ) Evaluates the given x in the fitting function with the optimal parameters. Parameters: Name Type Description Default x float Independent variable. required Returns: Name Type Description y float Dependent variable. Source code in itfit/utils/fit_container.py 121 122 123 124 125 126 127 128 129 130 131 132 def evaluate ( self , x ): \"\"\"Evaluates the given `x` in the fitting function with the optimal parameters. Parameters: x (float): Independent variable. Returns: y (float): Dependent variable. \"\"\" return self . function ( x , * self . get_parameters ()) get_data () Gets the data used. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Data used. Source code in itfit/utils/fit_container.py 76 77 78 79 80 81 82 83 def get_data ( self ): \"\"\"Gets the data used. Returns: (Tuple[Tuple[float], Tuple[float]]): Data used. \"\"\" return self . data . get_data () get_fit_data () Gets the fit curve data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Fit curve data. Source code in itfit/utils/fit_container.py 103 104 105 106 107 108 109 110 def get_fit_data ( self ): \"\"\"Gets the fit curve data. Returns: (Tuple[Tuple[float], Tuple[float]]): Fit curve data. \"\"\" return np . array (( self . get_fit_xdata (), self . get_fit_ydata ())) . T get_fit_xdata () Gets the x component of the fit curve. Equal to get_xdata output. Returns: Type Description Tuple [ float ] X component of fit curve. Equal to get_xdata output. Source code in itfit/utils/fit_container.py 85 86 87 88 89 90 91 92 def get_fit_xdata ( self ): \"\"\"Gets the x component of the fit curve. Equal to get_xdata output. Returns: (Tuple[float]): X component of fit curve. Equal to get_xdata output. \"\"\" return self . get_xdata () get_fit_ydata () Gets the y coomponent of the fit curve. Returns: Type Description Tuple [ float ] Y component of fit curve. Source code in itfit/utils/fit_container.py 94 95 96 97 98 99 100 101 def get_fit_ydata ( self ): \"\"\"Gets the y coomponent of the fit curve. Returns: (Tuple[float]): Y component of fit curve. \"\"\" return self . get_ydata () + self . scipy_output [ \"fvec\" ] get_message () Gets scipy output mesg output. Returns: Type Description str Scipy output message. Source code in itfit/utils/fit_container.py 112 113 114 115 116 117 118 119 def get_message ( self ): \"\"\"Gets scipy output `mesg` output. Returns: (str): Scipy output message. \"\"\" return self . scipy_output [ \"mesg\" ] get_parameters () Gets the optimal fitting parameters found. Returns: Type Description Tuple [ float ] Tuple of parameters. Source code in itfit/utils/fit_container.py 31 32 33 34 35 36 37 38 def get_parameters ( self ): \"\"\"Gets the optimal fitting parameters found. Returns: (Tuple[float]): Tuple of parameters. \"\"\" return self . scipy_output [ \"popt\" ] get_parameters_covariance () Gets the parameters covariance matrix. Returns: Type Description Ndarray ( NxN )[ float ] Parameters covariance matrix. Source code in itfit/utils/fit_container.py 40 41 42 43 44 45 46 47 def get_parameters_covariance ( self ): \"\"\"Gets the parameters covariance matrix. Returns: (Ndarray(NxN)[float]): Parameters covariance matrix. \"\"\" return self . scipy_output [ \"pcov\" ] get_parameters_errors () Gets the square root of diagonal elements of the covariance matrix. Returns: Type Description Tuple [ float ] Optimal fitting parameters standard error. Source code in itfit/utils/fit_container.py 49 50 51 52 53 54 55 56 def get_parameters_errors ( self ): \"\"\"Gets the square root of diagonal elements of the covariance matrix. Returns: (Tuple[float]): Optimal fitting parameters standard error. \"\"\" return np . sqrt ( np . diag ( self . get_parameters_covariance ())) get_xdata () Gets the x component of the data used. Returns: Type Description Tuple [ float ] X component of data used. Source code in itfit/utils/fit_container.py 58 59 60 61 62 63 64 65 def get_xdata ( self ): \"\"\"Gets the x component of the data used. Returns: (Tuple[float]): X component of data used. \"\"\" return self . data . xdata get_ydata () Gets the y component of the data used. Returns: Type Description Tuple [ float ] Y component of data used. Source code in itfit/utils/fit_container.py 67 68 69 70 71 72 73 74 def get_ydata ( self ): \"\"\"Gets the y component of the data used. Returns: (Tuple[float]): Y component of data used. \"\"\" return self . data . ydata","title":"Fit container"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer","text":"Source code in itfit/utils/fit_container.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class FitResultContainer : def __init__ ( self , data , fit_manager , scipy_result ): \"\"\"_summary_ Parameters: data (DataContainer): Data fitted. fit_manager (GenericFitter): Fit function used scipy_result (dict): Dictionary of `scipy.optimize.curve_fit` output. \"\"\" self . data = data self . function = fit_manager . function self . fit_manager = fit_manager self . scipy_output = { \"popt\" : scipy_result [ 0 ], \"pcov\" : scipy_result [ 1 ], \"fvec\" : scipy_result [ 2 ][ \"fvec\" ], \"nfev\" : scipy_result [ 2 ][ \"nfev\" ], \"fjac\" : scipy_result [ 2 ][ \"fjac\" ], \"ipvt\" : scipy_result [ 2 ][ \"ipvt\" ], \"qtf\" : scipy_result [ 2 ][ \"qtf\" ], \"mesg\" : scipy_result [ 3 ], \"ier\" : scipy_result [ 4 ] } def get_parameters ( self ): \"\"\"Gets the optimal fitting parameters found. Returns: (Tuple[float]): Tuple of parameters. \"\"\" return self . scipy_output [ \"popt\" ] def get_parameters_covariance ( self ): \"\"\"Gets the parameters covariance matrix. Returns: (Ndarray(NxN)[float]): Parameters covariance matrix. \"\"\" return self . scipy_output [ \"pcov\" ] def get_parameters_errors ( self ): \"\"\"Gets the square root of diagonal elements of the covariance matrix. Returns: (Tuple[float]): Optimal fitting parameters standard error. \"\"\" return np . sqrt ( np . diag ( self . get_parameters_covariance ())) def get_xdata ( self ): \"\"\"Gets the x component of the data used. Returns: (Tuple[float]): X component of data used. \"\"\" return self . data . xdata def get_ydata ( self ): \"\"\"Gets the y component of the data used. Returns: (Tuple[float]): Y component of data used. \"\"\" return self . data . ydata def get_data ( self ): \"\"\"Gets the data used. Returns: (Tuple[Tuple[float], Tuple[float]]): Data used. \"\"\" return self . data . get_data () def get_fit_xdata ( self ): \"\"\"Gets the x component of the fit curve. Equal to get_xdata output. Returns: (Tuple[float]): X component of fit curve. Equal to get_xdata output. \"\"\" return self . get_xdata () def get_fit_ydata ( self ): \"\"\"Gets the y coomponent of the fit curve. Returns: (Tuple[float]): Y component of fit curve. \"\"\" return self . get_ydata () + self . scipy_output [ \"fvec\" ] def get_fit_data ( self ): \"\"\"Gets the fit curve data. Returns: (Tuple[Tuple[float], Tuple[float]]): Fit curve data. \"\"\" return np . array (( self . get_fit_xdata (), self . get_fit_ydata ())) . T def get_message ( self ): \"\"\"Gets scipy output `mesg` output. Returns: (str): Scipy output message. \"\"\" return self . scipy_output [ \"mesg\" ] def evaluate ( self , x ): \"\"\"Evaluates the given `x` in the fitting function with the optimal parameters. Parameters: x (float): Independent variable. Returns: y (float): Dependent variable. \"\"\" return self . function ( x , * self . get_parameters ()) def save ( self , filename ): # TODO: ... @classmethod def load ( cls , filename ): # TODO: ...","title":"FitResultContainer"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.__init__","text":"summary Parameters: Name Type Description Default data DataContainer Data fitted. required fit_manager GenericFitter Fit function used required scipy_result dict Dictionary of scipy.optimize.curve_fit output. required Source code in itfit/utils/fit_container.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , data , fit_manager , scipy_result ): \"\"\"_summary_ Parameters: data (DataContainer): Data fitted. fit_manager (GenericFitter): Fit function used scipy_result (dict): Dictionary of `scipy.optimize.curve_fit` output. \"\"\" self . data = data self . function = fit_manager . function self . fit_manager = fit_manager self . scipy_output = { \"popt\" : scipy_result [ 0 ], \"pcov\" : scipy_result [ 1 ], \"fvec\" : scipy_result [ 2 ][ \"fvec\" ], \"nfev\" : scipy_result [ 2 ][ \"nfev\" ], \"fjac\" : scipy_result [ 2 ][ \"fjac\" ], \"ipvt\" : scipy_result [ 2 ][ \"ipvt\" ], \"qtf\" : scipy_result [ 2 ][ \"qtf\" ], \"mesg\" : scipy_result [ 3 ], \"ier\" : scipy_result [ 4 ] }","title":"__init__()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.evaluate","text":"Evaluates the given x in the fitting function with the optimal parameters. Parameters: Name Type Description Default x float Independent variable. required Returns: Name Type Description y float Dependent variable. Source code in itfit/utils/fit_container.py 121 122 123 124 125 126 127 128 129 130 131 132 def evaluate ( self , x ): \"\"\"Evaluates the given `x` in the fitting function with the optimal parameters. Parameters: x (float): Independent variable. Returns: y (float): Dependent variable. \"\"\" return self . function ( x , * self . get_parameters ())","title":"evaluate()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_data","text":"Gets the data used. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Data used. Source code in itfit/utils/fit_container.py 76 77 78 79 80 81 82 83 def get_data ( self ): \"\"\"Gets the data used. Returns: (Tuple[Tuple[float], Tuple[float]]): Data used. \"\"\" return self . data . get_data ()","title":"get_data()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_data","text":"Gets the fit curve data. Returns: Type Description Tuple [ Tuple [ float ], Tuple [ float ]] Fit curve data. Source code in itfit/utils/fit_container.py 103 104 105 106 107 108 109 110 def get_fit_data ( self ): \"\"\"Gets the fit curve data. Returns: (Tuple[Tuple[float], Tuple[float]]): Fit curve data. \"\"\" return np . array (( self . get_fit_xdata (), self . get_fit_ydata ())) . T","title":"get_fit_data()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_xdata","text":"Gets the x component of the fit curve. Equal to get_xdata output. Returns: Type Description Tuple [ float ] X component of fit curve. Equal to get_xdata output. Source code in itfit/utils/fit_container.py 85 86 87 88 89 90 91 92 def get_fit_xdata ( self ): \"\"\"Gets the x component of the fit curve. Equal to get_xdata output. Returns: (Tuple[float]): X component of fit curve. Equal to get_xdata output. \"\"\" return self . get_xdata ()","title":"get_fit_xdata()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_ydata","text":"Gets the y coomponent of the fit curve. Returns: Type Description Tuple [ float ] Y component of fit curve. Source code in itfit/utils/fit_container.py 94 95 96 97 98 99 100 101 def get_fit_ydata ( self ): \"\"\"Gets the y coomponent of the fit curve. Returns: (Tuple[float]): Y component of fit curve. \"\"\" return self . get_ydata () + self . scipy_output [ \"fvec\" ]","title":"get_fit_ydata()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_message","text":"Gets scipy output mesg output. Returns: Type Description str Scipy output message. Source code in itfit/utils/fit_container.py 112 113 114 115 116 117 118 119 def get_message ( self ): \"\"\"Gets scipy output `mesg` output. Returns: (str): Scipy output message. \"\"\" return self . scipy_output [ \"mesg\" ]","title":"get_message()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters","text":"Gets the optimal fitting parameters found. Returns: Type Description Tuple [ float ] Tuple of parameters. Source code in itfit/utils/fit_container.py 31 32 33 34 35 36 37 38 def get_parameters ( self ): \"\"\"Gets the optimal fitting parameters found. Returns: (Tuple[float]): Tuple of parameters. \"\"\" return self . scipy_output [ \"popt\" ]","title":"get_parameters()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters_covariance","text":"Gets the parameters covariance matrix. Returns: Type Description Ndarray ( NxN )[ float ] Parameters covariance matrix. Source code in itfit/utils/fit_container.py 40 41 42 43 44 45 46 47 def get_parameters_covariance ( self ): \"\"\"Gets the parameters covariance matrix. Returns: (Ndarray(NxN)[float]): Parameters covariance matrix. \"\"\" return self . scipy_output [ \"pcov\" ]","title":"get_parameters_covariance()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters_errors","text":"Gets the square root of diagonal elements of the covariance matrix. Returns: Type Description Tuple [ float ] Optimal fitting parameters standard error. Source code in itfit/utils/fit_container.py 49 50 51 52 53 54 55 56 def get_parameters_errors ( self ): \"\"\"Gets the square root of diagonal elements of the covariance matrix. Returns: (Tuple[float]): Optimal fitting parameters standard error. \"\"\" return np . sqrt ( np . diag ( self . get_parameters_covariance ()))","title":"get_parameters_errors()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_xdata","text":"Gets the x component of the data used. Returns: Type Description Tuple [ float ] X component of data used. Source code in itfit/utils/fit_container.py 58 59 60 61 62 63 64 65 def get_xdata ( self ): \"\"\"Gets the x component of the data used. Returns: (Tuple[float]): X component of data used. \"\"\" return self . data . xdata","title":"get_xdata()"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_ydata","text":"Gets the y component of the data used. Returns: Type Description Tuple [ float ] Y component of data used. Source code in itfit/utils/fit_container.py 67 68 69 70 71 72 73 74 def get_ydata ( self ): \"\"\"Gets the y component of the data used. Returns: (Tuple[float]): Y component of data used. \"\"\" return self . data . ydata","title":"get_ydata()"},{"location":"reference/itfit/utils/gaussian/","text":"DragGaussianManager Bases: DragPointCollection Collection of DragPoints representing a Gaussian function. Source code in itfit/utils/gaussian.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class DragGaussianManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a Gaussian function.\"\"\" @staticmethod def function ( x , A , m , s ): \"\"\"Gaussian function. Parameters: x (float): independent variable. A (float): value at `x=m`. m (float): central point. s (float): sigma. Returns: (float): `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" return A * np . exp ( - 0.5 * ( x - m ) ** 2 / s ** 2 ) def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Gaussian line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . peak = self . dragpoints [ 0 ] self . side = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" peak_x , side_x = self . get_xdata () A , m , s = self . get_args () #create x and y data of gaussian line of a gaussian that moves across two poitns dx = abs ( peak_x - side_x ) * 1.5 x = np . linspace ( min ( peak_x , side_x ) - dx , max ( peak_x , side_x ) + dx , 250 ) y = self . function ( x , A , m , s ) #from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives Gaussian function parameters. Returns: (Tuple[float, float, float]): `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" peak_x , peak_y = self . get_xy ( * self . peak . patch . get_center ()) side_x , side_y = self . get_xy ( * self . side . patch . get_center ()) if ( peak_y < side_y and peak_y > 0 ) or \\ ( peak_y >= side_y and peak_y < 0 ): peak_x , peak_y = self . get_xy ( * self . side . patch . get_center ()) side_x , side_y = self . get_xy ( * self . peak . patch . get_center ()) m = peak_x A = peak_y #create a case for negative peaks s = abs ( side_x - peak_x ) * np . sqrt ( 0.5 / np . log ( abs ( peak_y / side_y )) ) return A , m , s __init__ ( dragpoints , blit_manager ) Gaussian line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automatic ploting. required Source code in itfit/utils/gaussian.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Gaussian line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . peak = self . dragpoints [ 0 ] self . side = self . dragpoints [ 1 ] self . update () function ( x , A , m , s ) staticmethod Gaussian function. Parameters: Name Type Description Default x float independent variable. required A float value at x=m . required m float central point. required s float sigma. required Returns: Type Description float f(x) = A*exp(0.5*(x-m)^2 / s^2) Source code in itfit/utils/gaussian.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @staticmethod def function ( x , A , m , s ): \"\"\"Gaussian function. Parameters: x (float): independent variable. A (float): value at `x=m`. m (float): central point. s (float): sigma. Returns: (float): `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" return A * np . exp ( - 0.5 * ( x - m ) ** 2 / s ** 2 ) get_args () Gives Gaussian function parameters. Returns: Type Description Tuple [ float , float , float ] A , m , and s of f(x) = A*exp(0.5*(x-m)^2 / s^2) Source code in itfit/utils/gaussian.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def get_args ( self ): \"\"\"Gives Gaussian function parameters. Returns: (Tuple[float, float, float]): `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" peak_x , peak_y = self . get_xy ( * self . peak . patch . get_center ()) side_x , side_y = self . get_xy ( * self . side . patch . get_center ()) if ( peak_y < side_y and peak_y > 0 ) or \\ ( peak_y >= side_y and peak_y < 0 ): peak_x , peak_y = self . get_xy ( * self . side . patch . get_center ()) side_x , side_y = self . get_xy ( * self . peak . patch . get_center ()) m = peak_x A = peak_y #create a case for negative peaks s = abs ( side_x - peak_x ) * np . sqrt ( 0.5 / np . log ( abs ( peak_y / side_y )) ) return A , m , s update ( * args , ** kargs ) Updates line data with DragObjects positions Source code in itfit/utils/gaussian.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" peak_x , side_x = self . get_xdata () A , m , s = self . get_args () #create x and y data of gaussian line of a gaussian that moves across two poitns dx = abs ( peak_x - side_x ) * 1.5 x = np . linspace ( min ( peak_x , side_x ) - dx , max ( peak_x , side_x ) + dx , 250 ) y = self . function ( x , A , m , s ) #from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"Gaussian"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager","text":"Bases: DragPointCollection Collection of DragPoints representing a Gaussian function. Source code in itfit/utils/gaussian.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class DragGaussianManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a Gaussian function.\"\"\" @staticmethod def function ( x , A , m , s ): \"\"\"Gaussian function. Parameters: x (float): independent variable. A (float): value at `x=m`. m (float): central point. s (float): sigma. Returns: (float): `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" return A * np . exp ( - 0.5 * ( x - m ) ** 2 / s ** 2 ) def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Gaussian line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . peak = self . dragpoints [ 0 ] self . side = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" peak_x , side_x = self . get_xdata () A , m , s = self . get_args () #create x and y data of gaussian line of a gaussian that moves across two poitns dx = abs ( peak_x - side_x ) * 1.5 x = np . linspace ( min ( peak_x , side_x ) - dx , max ( peak_x , side_x ) + dx , 250 ) y = self . function ( x , A , m , s ) #from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives Gaussian function parameters. Returns: (Tuple[float, float, float]): `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" peak_x , peak_y = self . get_xy ( * self . peak . patch . get_center ()) side_x , side_y = self . get_xy ( * self . side . patch . get_center ()) if ( peak_y < side_y and peak_y > 0 ) or \\ ( peak_y >= side_y and peak_y < 0 ): peak_x , peak_y = self . get_xy ( * self . side . patch . get_center ()) side_x , side_y = self . get_xy ( * self . peak . patch . get_center ()) m = peak_x A = peak_y #create a case for negative peaks s = abs ( side_x - peak_x ) * np . sqrt ( 0.5 / np . log ( abs ( peak_y / side_y )) ) return A , m , s","title":"DragGaussianManager"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.__init__","text":"Gaussian line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automatic ploting. required Source code in itfit/utils/gaussian.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Gaussian line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automatic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . peak = self . dragpoints [ 0 ] self . side = self . dragpoints [ 1 ] self . update ()","title":"__init__()"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.function","text":"Gaussian function. Parameters: Name Type Description Default x float independent variable. required A float value at x=m . required m float central point. required s float sigma. required Returns: Type Description float f(x) = A*exp(0.5*(x-m)^2 / s^2) Source code in itfit/utils/gaussian.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @staticmethod def function ( x , A , m , s ): \"\"\"Gaussian function. Parameters: x (float): independent variable. A (float): value at `x=m`. m (float): central point. s (float): sigma. Returns: (float): `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" return A * np . exp ( - 0.5 * ( x - m ) ** 2 / s ** 2 )","title":"function()"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.get_args","text":"Gives Gaussian function parameters. Returns: Type Description Tuple [ float , float , float ] A , m , and s of f(x) = A*exp(0.5*(x-m)^2 / s^2) Source code in itfit/utils/gaussian.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def get_args ( self ): \"\"\"Gives Gaussian function parameters. Returns: (Tuple[float, float, float]): `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)` \"\"\" peak_x , peak_y = self . get_xy ( * self . peak . patch . get_center ()) side_x , side_y = self . get_xy ( * self . side . patch . get_center ()) if ( peak_y < side_y and peak_y > 0 ) or \\ ( peak_y >= side_y and peak_y < 0 ): peak_x , peak_y = self . get_xy ( * self . side . patch . get_center ()) side_x , side_y = self . get_xy ( * self . peak . patch . get_center ()) m = peak_x A = peak_y #create a case for negative peaks s = abs ( side_x - peak_x ) * np . sqrt ( 0.5 / np . log ( abs ( peak_y / side_y )) ) return A , m , s","title":"get_args()"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.update","text":"Updates line data with DragObjects positions Source code in itfit/utils/gaussian.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" peak_x , side_x = self . get_xdata () A , m , s = self . get_args () #create x and y data of gaussian line of a gaussian that moves across two poitns dx = abs ( peak_x - side_x ) * 1.5 x = np . linspace ( min ( peak_x , side_x ) - dx , max ( peak_x , side_x ) + dx , 250 ) y = self . function ( x , A , m , s ) #from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T #set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"update()"},{"location":"reference/itfit/utils/line/","text":"DragLineManager Bases: DragPointCollection Collection of DragPoints representing a straight line. Source code in itfit/utils/line.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class DragLineManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a straight line.\"\"\" @staticmethod def function ( x , m , n ): \"\"\"Straight line function. Parameters: x (float): independent variable. m (float): slope. n (float): value at `x=0`. Returns: (float): `f(x) = m*x+n` \"\"\" return m * x + n def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Line between multiple DragPoints. Updates with them. Parameters: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" x0 , x1 = self . get_xdata () m , n = self . get_args () if ( m , n ) == ( 0 , 0 ): self . poly . set_xdata ( self . get_xdata_display ()) self . poly . set_ydata ( self . get_ydata_display ()) # create x and y data dx = abs ( x0 - x1 ) * 0.5 x = np . linspace ( min ( x0 , x1 ) - dx , max ( x0 , x1 ) + dx , 250 ) y = self . function ( x , m , n ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives linear function parameters. Returns: (Tuple[float, float]): `m` and `n` of `f(x)=m*x + n`. \"\"\" x0 , x1 = self . get_xdata () y0 , y1 = self . get_ydata () if ( x1 - x0 ) == 0 : return 0. , 0. m : float = ( y1 - y0 ) / ( x1 - x0 ) n : float = m * ( - x1 ) + y1 return m , n __init__ ( dragpoints , blit_manager ) Line between multiple DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/line.py 27 28 29 30 31 32 33 34 35 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Line between multiple DragPoints. Updates with them. Parameters: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) self . update () function ( x , m , n ) staticmethod Straight line function. Parameters: Name Type Description Default x float independent variable. required m float slope. required n float value at x=0 . required Returns: Type Description float f(x) = m*x+n Source code in itfit/utils/line.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @staticmethod def function ( x , m , n ): \"\"\"Straight line function. Parameters: x (float): independent variable. m (float): slope. n (float): value at `x=0`. Returns: (float): `f(x) = m*x+n` \"\"\" return m * x + n get_args () Gives linear function parameters. Returns: Type Description Tuple [ float , float ] m and n of f(x)=m*x + n . Source code in itfit/utils/line.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def get_args ( self ): \"\"\"Gives linear function parameters. Returns: (Tuple[float, float]): `m` and `n` of `f(x)=m*x + n`. \"\"\" x0 , x1 = self . get_xdata () y0 , y1 = self . get_ydata () if ( x1 - x0 ) == 0 : return 0. , 0. m : float = ( y1 - y0 ) / ( x1 - x0 ) n : float = m * ( - x1 ) + y1 return m , n update ( * args , ** kargs ) Updates line data with DragObjects positions Source code in itfit/utils/line.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" x0 , x1 = self . get_xdata () m , n = self . get_args () if ( m , n ) == ( 0 , 0 ): self . poly . set_xdata ( self . get_xdata_display ()) self . poly . set_ydata ( self . get_ydata_display ()) # create x and y data dx = abs ( x0 - x1 ) * 0.5 x = np . linspace ( min ( x0 , x1 ) - dx , max ( x0 , x1 ) + dx , 250 ) y = self . function ( x , m , n ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"Line"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager","text":"Bases: DragPointCollection Collection of DragPoints representing a straight line. Source code in itfit/utils/line.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class DragLineManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a straight line.\"\"\" @staticmethod def function ( x , m , n ): \"\"\"Straight line function. Parameters: x (float): independent variable. m (float): slope. n (float): value at `x=0`. Returns: (float): `f(x) = m*x+n` \"\"\" return m * x + n def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Line between multiple DragPoints. Updates with them. Parameters: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" x0 , x1 = self . get_xdata () m , n = self . get_args () if ( m , n ) == ( 0 , 0 ): self . poly . set_xdata ( self . get_xdata_display ()) self . poly . set_ydata ( self . get_ydata_display ()) # create x and y data dx = abs ( x0 - x1 ) * 0.5 x = np . linspace ( min ( x0 , x1 ) - dx , max ( x0 , x1 ) + dx , 250 ) y = self . function ( x , m , n ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives linear function parameters. Returns: (Tuple[float, float]): `m` and `n` of `f(x)=m*x + n`. \"\"\" x0 , x1 = self . get_xdata () y0 , y1 = self . get_ydata () if ( x1 - x0 ) == 0 : return 0. , 0. m : float = ( y1 - y0 ) / ( x1 - x0 ) n : float = m * ( - x1 ) + y1 return m , n","title":"DragLineManager"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.__init__","text":"Line between multiple DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/line.py 27 28 29 30 31 32 33 34 35 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Line between multiple DragPoints. Updates with them. Parameters: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) self . update ()","title":"__init__()"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.function","text":"Straight line function. Parameters: Name Type Description Default x float independent variable. required m float slope. required n float value at x=0 . required Returns: Type Description float f(x) = m*x+n Source code in itfit/utils/line.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @staticmethod def function ( x , m , n ): \"\"\"Straight line function. Parameters: x (float): independent variable. m (float): slope. n (float): value at `x=0`. Returns: (float): `f(x) = m*x+n` \"\"\" return m * x + n","title":"function()"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.get_args","text":"Gives linear function parameters. Returns: Type Description Tuple [ float , float ] m and n of f(x)=m*x + n . Source code in itfit/utils/line.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def get_args ( self ): \"\"\"Gives linear function parameters. Returns: (Tuple[float, float]): `m` and `n` of `f(x)=m*x + n`. \"\"\" x0 , x1 = self . get_xdata () y0 , y1 = self . get_ydata () if ( x1 - x0 ) == 0 : return 0. , 0. m : float = ( y1 - y0 ) / ( x1 - x0 ) n : float = m * ( - x1 ) + y1 return m , n","title":"get_args()"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.update","text":"Updates line data with DragObjects positions Source code in itfit/utils/line.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" x0 , x1 = self . get_xdata () m , n = self . get_args () if ( m , n ) == ( 0 , 0 ): self . poly . set_xdata ( self . get_xdata_display ()) self . poly . set_ydata ( self . get_ydata_display ()) # create x and y data dx = abs ( x0 - x1 ) * 0.5 x = np . linspace ( min ( x0 , x1 ) - dx , max ( x0 , x1 ) + dx , 250 ) y = self . function ( x , m , n ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"update()"},{"location":"reference/itfit/utils/point/","text":"DragPoint Data containter for draggable points. In the future it may support form, size and colour change. Source code in itfit/utils/point.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class DragPoint : \"\"\"Data containter for draggable points. In the future it may support form, size and colour change. \"\"\" def __init__ ( self , x , y , style , * args ): \"\"\"Creates a patch in given display coordinates. Parameters: x (float): y position in display units (between 0 and 1). y (float): y position in display units (between 0 and 1). style : Any No used. \"\"\" self . _style = style self . restriction_callback = lambda x , y : ( x , y ) self . patch = Circle ( np . array ([ x , y ]), 10 ) def get_center ( self ): \"\"\"Returns the center position in display coordinates. Returns: (Tuple[float,float]): Center in display coordinates. \"\"\" return self . restriction_callback ( * self . patch . get_center ()) def remove ( self ): \"\"\"Removes the point from the figure.\"\"\" self . patch . remove () __init__ ( x , y , style , * args ) Creates a patch in given display coordinates. Parameters: Name Type Description Default x float y position in display units (between 0 and 1). required y float y position in display units (between 0 and 1). required style Any No used. required Source code in itfit/utils/point.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , x , y , style , * args ): \"\"\"Creates a patch in given display coordinates. Parameters: x (float): y position in display units (between 0 and 1). y (float): y position in display units (between 0 and 1). style : Any No used. \"\"\" self . _style = style self . restriction_callback = lambda x , y : ( x , y ) self . patch = Circle ( np . array ([ x , y ]), 10 ) get_center () Returns the center position in display coordinates. Returns: Type Description Tuple [ float , float ] Center in display coordinates. Source code in itfit/utils/point.py 24 25 26 27 28 29 30 31 def get_center ( self ): \"\"\"Returns the center position in display coordinates. Returns: (Tuple[float,float]): Center in display coordinates. \"\"\" return self . restriction_callback ( * self . patch . get_center ()) remove () Removes the point from the figure. Source code in itfit/utils/point.py 33 34 35 def remove ( self ): \"\"\"Removes the point from the figure.\"\"\" self . patch . remove () DragPointManager Manages DragPoints : event connection, automatic replotting on change/update, blitting and restrictions. Source code in itfit/utils/point.pyclass DragPointManager : \"\"\"Manages `DragPoints`: event connection, automatic replotting on change/update, blitting and restrictions. \"\"\" def __init__ ( self , dragpoint : DragPoint , blit_manager ): \"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: dragpoint (DragPoint): contains patch. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoint = dragpoint self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . dragpoint . patch . set_transform ( None ) self . blit_manager . ax . add_patch ( self . dragpoint . patch ) self . poly = self . dragpoint . patch self . connection_callbacks = {} self . restricction_callback = lambda x , y : ( x , y ) self . canvas . mpl_connect ( 'button_press_event' , self . on_button_press ) self . canvas . mpl_connect ( 'key_press_event' , self . on_key_press ) self . canvas . mpl_connect ( 'button_release_event' , self . on_button_release ) self . canvas . mpl_connect ( 'motion_notify_event' , self . on_mouse_move ) self . _ind = None # Used for enabling mouse motion. def connect ( self , function ): \"\"\"Connects a callback for change envents. Parameters: function (callable): Function to be executed when the DragPoint updates. Must have signature `def f(event)`. Returns: (Int): Connection id. Can be used in `DragPointManager.disconnect`. \"\"\" cin = np . random . randint ( 1000000 ) self . connection_callbacks . update ({ cin : function }) return cin def disconnect ( self , cid ): \"\"\"Disconnects the callback with given `cid`. Parameters: cid (Int): Connection id. \"\"\" if cid in self . connection_callbacks . keys (): self . connection_callbacks . pop ( cid ) def add_restriction ( self , function ): \"\"\"Adds a restriction to point movement. Parameters: function (callable): Must have signature `def f(new_x,new_y): -> Tuple[float, float]` \"\"\" self . restricction_callback = function self . dragpoint . restriction_callback = self . restricction_callback def remove_restriction ( self ): \"\"\"Removes the restriction to point movement\"\"\" self . restricction_callback = lambda x , y :( x , y ) self . dragpoint . restriction_callback = self . restricction_callback def get_xy ( self , x , y ): \"\"\"Applies correct transformation from display to data coordinates. Parameters: x (float): x in display coordinates. y (float): y in display coordinates. Returns: (Tuple[float,float]): x and y in data coordinates. \"\"\" return self . ax . transData . inverted () . transform (( x , y )) def set_xy ( self , x , y ): \"\"\"Applies correct transformation from data coordinates to display Parameters: x (float): x in data coordinates. y (float): y in data coordinates. Returns: (Tuple[float,float]): x and y in display coordinates. \"\"\" return self . ax . transData . transform (( x , y )) def on_button_press ( self , event ): \"\"\"Callback for mouse button presses\"\"\" if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . set_xy ( x , y ) if np . hypot ( * ( self . poly . center - np . array ([ x , y ]))) < 1.5 * self . poly . get_radius (): self . _ind = 0 def on_button_release ( self , event ): \"\"\"Callback for mouse button releases\"\"\" if event . button != 1 : return self . _ind = None def on_key_press ( self , event ): \"\"\"Callback for key presses\"\"\" #! This may be useful later. if not event . inaxes : return def on_mouse_move ( self , event ): \"\"\"Callback for mouse movements\"\"\" if self . _ind is None : return if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . restricction_callback ( x , y ) x , y = self . set_xy ( x , y ) prop = { 'center' : np . array ([ x , y ])} Artist . update ( self . poly , prop ) for k , v in self . connection_callbacks . items (): v ( x , y ) self . blit_manager . draw () __init__ ( dragpoint , blit_manager ) Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: Name Type Description Default dragpoint DragPoint contains patch. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/point.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , dragpoint : DragPoint , blit_manager ): \"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: dragpoint (DragPoint): contains patch. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoint = dragpoint self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . dragpoint . patch . set_transform ( None ) self . blit_manager . ax . add_patch ( self . dragpoint . patch ) self . poly = self . dragpoint . patch self . connection_callbacks = {} self . restricction_callback = lambda x , y : ( x , y ) self . canvas . mpl_connect ( 'button_press_event' , self . on_button_press ) self . canvas . mpl_connect ( 'key_press_event' , self . on_key_press ) self . canvas . mpl_connect ( 'button_release_event' , self . on_button_release ) self . canvas . mpl_connect ( 'motion_notify_event' , self . on_mouse_move ) self . _ind = None # Used for enabling mouse motion. add_restriction ( function ) Adds a restriction to point movement. Parameters: Name Type Description Default function callable Must have signature def f(new_x,new_y): -> Tuple[float, float] required Source code in itfit/utils/point.py 94 95 96 97 98 99 100 101 102 def add_restriction ( self , function ): \"\"\"Adds a restriction to point movement. Parameters: function (callable): Must have signature `def f(new_x,new_y): -> Tuple[float, float]` \"\"\" self . restricction_callback = function self . dragpoint . restriction_callback = self . restricction_callback connect ( function ) Connects a callback for change envents. Parameters: Name Type Description Default function callable Function to be executed when the DragPoint updates. Must have signature def f(event) . required Returns: Type Description Int Connection id. Can be used in DragPointManager.disconnect . Source code in itfit/utils/point.py 69 70 71 72 73 74 75 76 77 78 79 80 81 def connect ( self , function ): \"\"\"Connects a callback for change envents. Parameters: function (callable): Function to be executed when the DragPoint updates. Must have signature `def f(event)`. Returns: (Int): Connection id. Can be used in `DragPointManager.disconnect`. \"\"\" cin = np . random . randint ( 1000000 ) self . connection_callbacks . update ({ cin : function }) return cin disconnect ( cid ) Disconnects the callback with given cid . Parameters: Name Type Description Default cid Int Connection id. required Source code in itfit/utils/point.py 83 84 85 86 87 88 89 90 91 92 def disconnect ( self , cid ): \"\"\"Disconnects the callback with given `cid`. Parameters: cid (Int): Connection id. \"\"\" if cid in self . connection_callbacks . keys (): self . connection_callbacks . pop ( cid ) get_xy ( x , y ) Applies correct transformation from display to data coordinates. Parameters: Name Type Description Default x float x in display coordinates. required y float y in display coordinates. required Returns: Type Description Tuple [ float , float ] x and y in data coordinates. Source code in itfit/utils/point.py 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_xy ( self , x , y ): \"\"\"Applies correct transformation from display to data coordinates. Parameters: x (float): x in display coordinates. y (float): y in display coordinates. Returns: (Tuple[float,float]): x and y in data coordinates. \"\"\" return self . ax . transData . inverted () . transform (( x , y )) on_button_press ( event ) Callback for mouse button presses Source code in itfit/utils/point.py 137 138 139 140 141 142 143 144 145 146 147 def on_button_press ( self , event ): \"\"\"Callback for mouse button presses\"\"\" if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . set_xy ( x , y ) if np . hypot ( * ( self . poly . center - np . array ([ x , y ]))) < 1.5 * self . poly . get_radius (): self . _ind = 0 on_button_release ( event ) Callback for mouse button releases Source code in itfit/utils/point.py 149 150 151 152 153 def on_button_release ( self , event ): \"\"\"Callback for mouse button releases\"\"\" if event . button != 1 : return self . _ind = None on_key_press ( event ) Callback for key presses Source code in itfit/utils/point.py 155 156 157 158 159 def on_key_press ( self , event ): \"\"\"Callback for key presses\"\"\" #! This may be useful later. if not event . inaxes : return on_mouse_move ( event ) Callback for mouse movements Source code in itfit/utils/point.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def on_mouse_move ( self , event ): \"\"\"Callback for mouse movements\"\"\" if self . _ind is None : return if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . restricction_callback ( x , y ) x , y = self . set_xy ( x , y ) prop = { 'center' : np . array ([ x , y ])} Artist . update ( self . poly , prop ) for k , v in self . connection_callbacks . items (): v ( x , y ) self . blit_manager . draw () remove_restriction () Removes the restriction to point movement Source code in itfit/utils/point.py 104 105 106 107 def remove_restriction ( self ): \"\"\"Removes the restriction to point movement\"\"\" self . restricction_callback = lambda x , y :( x , y ) self . dragpoint . restriction_callback = self . restricction_callback set_xy ( x , y ) Applies correct transformation from data coordinates to display Parameters: Name Type Description Default x float x in data coordinates. required y float y in data coordinates. required Returns: Type Description Tuple [ float , float ] x and y in display coordinates. Source code in itfit/utils/point.py 123 124 125 126 127 128 129 130 131 132 133 134 135 def set_xy ( self , x , y ): \"\"\"Applies correct transformation from data coordinates to display Parameters: x (float): x in data coordinates. y (float): y in data coordinates. Returns: (Tuple[float,float]): x and y in display coordinates. \"\"\" return self . ax . transData . transform (( x , y ))","title":"Point"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint","text":"Data containter for draggable points. In the future it may support form, size and colour change. Source code in itfit/utils/point.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class DragPoint : \"\"\"Data containter for draggable points. In the future it may support form, size and colour change. \"\"\" def __init__ ( self , x , y , style , * args ): \"\"\"Creates a patch in given display coordinates. Parameters: x (float): y position in display units (between 0 and 1). y (float): y position in display units (between 0 and 1). style : Any No used. \"\"\" self . _style = style self . restriction_callback = lambda x , y : ( x , y ) self . patch = Circle ( np . array ([ x , y ]), 10 ) def get_center ( self ): \"\"\"Returns the center position in display coordinates. Returns: (Tuple[float,float]): Center in display coordinates. \"\"\" return self . restriction_callback ( * self . patch . get_center ()) def remove ( self ): \"\"\"Removes the point from the figure.\"\"\" self . patch . remove ()","title":"DragPoint"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.__init__","text":"Creates a patch in given display coordinates. Parameters: Name Type Description Default x float y position in display units (between 0 and 1). required y float y position in display units (between 0 and 1). required style Any No used. required Source code in itfit/utils/point.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , x , y , style , * args ): \"\"\"Creates a patch in given display coordinates. Parameters: x (float): y position in display units (between 0 and 1). y (float): y position in display units (between 0 and 1). style : Any No used. \"\"\" self . _style = style self . restriction_callback = lambda x , y : ( x , y ) self . patch = Circle ( np . array ([ x , y ]), 10 )","title":"__init__()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.get_center","text":"Returns the center position in display coordinates. Returns: Type Description Tuple [ float , float ] Center in display coordinates. Source code in itfit/utils/point.py 24 25 26 27 28 29 30 31 def get_center ( self ): \"\"\"Returns the center position in display coordinates. Returns: (Tuple[float,float]): Center in display coordinates. \"\"\" return self . restriction_callback ( * self . patch . get_center ())","title":"get_center()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.remove","text":"Removes the point from the figure. Source code in itfit/utils/point.py 33 34 35 def remove ( self ): \"\"\"Removes the point from the figure.\"\"\" self . patch . remove ()","title":"remove()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager","text":"Manages DragPoints : event connection, automatic replotting on change/update, blitting and restrictions. Source code in itfit/utils/point.pyclass DragPointManager : \"\"\"Manages `DragPoints`: event connection, automatic replotting on change/update, blitting and restrictions. \"\"\" def __init__ ( self , dragpoint : DragPoint , blit_manager ): \"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: dragpoint (DragPoint): contains patch. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoint = dragpoint self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . dragpoint . patch . set_transform ( None ) self . blit_manager . ax . add_patch ( self . dragpoint . patch ) self . poly = self . dragpoint . patch self . connection_callbacks = {} self . restricction_callback = lambda x , y : ( x , y ) self . canvas . mpl_connect ( 'button_press_event' , self . on_button_press ) self . canvas . mpl_connect ( 'key_press_event' , self . on_key_press ) self . canvas . mpl_connect ( 'button_release_event' , self . on_button_release ) self . canvas . mpl_connect ( 'motion_notify_event' , self . on_mouse_move ) self . _ind = None # Used for enabling mouse motion. def connect ( self , function ): \"\"\"Connects a callback for change envents. Parameters: function (callable): Function to be executed when the DragPoint updates. Must have signature `def f(event)`. Returns: (Int): Connection id. Can be used in `DragPointManager.disconnect`. \"\"\" cin = np . random . randint ( 1000000 ) self . connection_callbacks . update ({ cin : function }) return cin def disconnect ( self , cid ): \"\"\"Disconnects the callback with given `cid`. Parameters: cid (Int): Connection id. \"\"\" if cid in self . connection_callbacks . keys (): self . connection_callbacks . pop ( cid ) def add_restriction ( self , function ): \"\"\"Adds a restriction to point movement. Parameters: function (callable): Must have signature `def f(new_x,new_y): -> Tuple[float, float]` \"\"\" self . restricction_callback = function self . dragpoint . restriction_callback = self . restricction_callback def remove_restriction ( self ): \"\"\"Removes the restriction to point movement\"\"\" self . restricction_callback = lambda x , y :( x , y ) self . dragpoint . restriction_callback = self . restricction_callback def get_xy ( self , x , y ): \"\"\"Applies correct transformation from display to data coordinates. Parameters: x (float): x in display coordinates. y (float): y in display coordinates. Returns: (Tuple[float,float]): x and y in data coordinates. \"\"\" return self . ax . transData . inverted () . transform (( x , y )) def set_xy ( self , x , y ): \"\"\"Applies correct transformation from data coordinates to display Parameters: x (float): x in data coordinates. y (float): y in data coordinates. Returns: (Tuple[float,float]): x and y in display coordinates. \"\"\" return self . ax . transData . transform (( x , y )) def on_button_press ( self , event ): \"\"\"Callback for mouse button presses\"\"\" if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . set_xy ( x , y ) if np . hypot ( * ( self . poly . center - np . array ([ x , y ]))) < 1.5 * self . poly . get_radius (): self . _ind = 0 def on_button_release ( self , event ): \"\"\"Callback for mouse button releases\"\"\" if event . button != 1 : return self . _ind = None def on_key_press ( self , event ): \"\"\"Callback for key presses\"\"\" #! This may be useful later. if not event . inaxes : return def on_mouse_move ( self , event ): \"\"\"Callback for mouse movements\"\"\" if self . _ind is None : return if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . restricction_callback ( x , y ) x , y = self . set_xy ( x , y ) prop = { 'center' : np . array ([ x , y ])} Artist . update ( self . poly , prop ) for k , v in self . connection_callbacks . items (): v ( x , y ) self . blit_manager . draw ()","title":"DragPointManager"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.__init__","text":"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: Name Type Description Default dragpoint DragPoint contains patch. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/point.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , dragpoint : DragPoint , blit_manager ): \"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing. Parameters: dragpoint (DragPoint): contains patch. blit_manager (BlitManager): used for automtic ploting. \"\"\" self . dragpoint = dragpoint self . blit_manager = blit_manager self . ax = blit_manager . ax self . canvas = blit_manager . canvas self . dragpoint . patch . set_transform ( None ) self . blit_manager . ax . add_patch ( self . dragpoint . patch ) self . poly = self . dragpoint . patch self . connection_callbacks = {} self . restricction_callback = lambda x , y : ( x , y ) self . canvas . mpl_connect ( 'button_press_event' , self . on_button_press ) self . canvas . mpl_connect ( 'key_press_event' , self . on_key_press ) self . canvas . mpl_connect ( 'button_release_event' , self . on_button_release ) self . canvas . mpl_connect ( 'motion_notify_event' , self . on_mouse_move ) self . _ind = None # Used for enabling mouse motion.","title":"__init__()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.add_restriction","text":"Adds a restriction to point movement. Parameters: Name Type Description Default function callable Must have signature def f(new_x,new_y): -> Tuple[float, float] required Source code in itfit/utils/point.py 94 95 96 97 98 99 100 101 102 def add_restriction ( self , function ): \"\"\"Adds a restriction to point movement. Parameters: function (callable): Must have signature `def f(new_x,new_y): -> Tuple[float, float]` \"\"\" self . restricction_callback = function self . dragpoint . restriction_callback = self . restricction_callback","title":"add_restriction()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.connect","text":"Connects a callback for change envents. Parameters: Name Type Description Default function callable Function to be executed when the DragPoint updates. Must have signature def f(event) . required Returns: Type Description Int Connection id. Can be used in DragPointManager.disconnect . Source code in itfit/utils/point.py 69 70 71 72 73 74 75 76 77 78 79 80 81 def connect ( self , function ): \"\"\"Connects a callback for change envents. Parameters: function (callable): Function to be executed when the DragPoint updates. Must have signature `def f(event)`. Returns: (Int): Connection id. Can be used in `DragPointManager.disconnect`. \"\"\" cin = np . random . randint ( 1000000 ) self . connection_callbacks . update ({ cin : function }) return cin","title":"connect()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.disconnect","text":"Disconnects the callback with given cid . Parameters: Name Type Description Default cid Int Connection id. required Source code in itfit/utils/point.py 83 84 85 86 87 88 89 90 91 92 def disconnect ( self , cid ): \"\"\"Disconnects the callback with given `cid`. Parameters: cid (Int): Connection id. \"\"\" if cid in self . connection_callbacks . keys (): self . connection_callbacks . pop ( cid )","title":"disconnect()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.get_xy","text":"Applies correct transformation from display to data coordinates. Parameters: Name Type Description Default x float x in display coordinates. required y float y in display coordinates. required Returns: Type Description Tuple [ float , float ] x and y in data coordinates. Source code in itfit/utils/point.py 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_xy ( self , x , y ): \"\"\"Applies correct transformation from display to data coordinates. Parameters: x (float): x in display coordinates. y (float): y in display coordinates. Returns: (Tuple[float,float]): x and y in data coordinates. \"\"\" return self . ax . transData . inverted () . transform (( x , y ))","title":"get_xy()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_button_press","text":"Callback for mouse button presses Source code in itfit/utils/point.py 137 138 139 140 141 142 143 144 145 146 147 def on_button_press ( self , event ): \"\"\"Callback for mouse button presses\"\"\" if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . set_xy ( x , y ) if np . hypot ( * ( self . poly . center - np . array ([ x , y ]))) < 1.5 * self . poly . get_radius (): self . _ind = 0","title":"on_button_press()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_button_release","text":"Callback for mouse button releases Source code in itfit/utils/point.py 149 150 151 152 153 def on_button_release ( self , event ): \"\"\"Callback for mouse button releases\"\"\" if event . button != 1 : return self . _ind = None","title":"on_button_release()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_key_press","text":"Callback for key presses Source code in itfit/utils/point.py 155 156 157 158 159 def on_key_press ( self , event ): \"\"\"Callback for key presses\"\"\" #! This may be useful later. if not event . inaxes : return","title":"on_key_press()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_mouse_move","text":"Callback for mouse movements Source code in itfit/utils/point.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def on_mouse_move ( self , event ): \"\"\"Callback for mouse movements\"\"\" if self . _ind is None : return if event . inaxes is None : return if event . button != 1 : return x , y = event . xdata , event . ydata x , y = self . restricction_callback ( x , y ) x , y = self . set_xy ( x , y ) prop = { 'center' : np . array ([ x , y ])} Artist . update ( self . poly , prop ) for k , v in self . connection_callbacks . items (): v ( x , y ) self . blit_manager . draw ()","title":"on_mouse_move()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.remove_restriction","text":"Removes the restriction to point movement Source code in itfit/utils/point.py 104 105 106 107 def remove_restriction ( self ): \"\"\"Removes the restriction to point movement\"\"\" self . restricction_callback = lambda x , y :( x , y ) self . dragpoint . restriction_callback = self . restricction_callback","title":"remove_restriction()"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.set_xy","text":"Applies correct transformation from data coordinates to display Parameters: Name Type Description Default x float x in data coordinates. required y float y in data coordinates. required Returns: Type Description Tuple [ float , float ] x and y in display coordinates. Source code in itfit/utils/point.py 123 124 125 126 127 128 129 130 131 132 133 134 135 def set_xy ( self , x , y ): \"\"\"Applies correct transformation from data coordinates to display Parameters: x (float): x in data coordinates. y (float): y in data coordinates. Returns: (Tuple[float,float]): x and y in display coordinates. \"\"\" return self . ax . transData . transform (( x , y ))","title":"set_xy()"},{"location":"reference/itfit/utils/quadratic/","text":"DragQuadraticManager Bases: DragPointCollection Collection of DragPoints representing a quadratic line. Source code in itfit/utils/quadratic.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class DragQuadraticManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a quadratic line.\"\"\" @staticmethod def function ( x , a , b , c ): \"\"\"Quadratic function. Parameters: x (float): independent variable. a (float): x^2 coefficient. b (float): x^1 coefficient. c (float): constant coefficient. Returns: (float): `f(x)=a*x^2 + b*x + c` \"\"\" return a * x * x + b * x + c def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Quadratic line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . center_point = self . dragpoints [ 0 ] self . lateral_point = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" cp_x , lp_x = self . get_xdata () a , b , c = self . get_args () # create x and y data of quadratic line centered in center_point dx = abs ( lp_x - cp_x ) * 1.5 x = np . linspace ( cp_x - dx , cp_x + dx , 250 ) y = self . function ( x , a , b , c ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives quadratic function parameters. Returns: (Tuple[float, float, float]): `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`. \"\"\" cp_x , cp_y = self . get_xy ( * self . center_point . patch . get_center ()) lp_x , lp_y = self . get_xy ( * self . lateral_point . patch . get_center ()) a = ( lp_y - cp_y ) / np . square ( lp_x - cp_x ) b = - 2 * a * cp_x c = cp_y + a * cp_x * cp_x return a , b , c __init__ ( dragpoints , blit_manager ) Quadratic line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/quadratic.py 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Quadratic line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . center_point = self . dragpoints [ 0 ] self . lateral_point = self . dragpoints [ 1 ] self . update () function ( x , a , b , c ) staticmethod Quadratic function. Parameters: Name Type Description Default x float independent variable. required a float x^2 coefficient. required b float x^1 coefficient. required c float constant coefficient. required Returns: Type Description float f(x)=a*x^2 + b*x + c Source code in itfit/utils/quadratic.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @staticmethod def function ( x , a , b , c ): \"\"\"Quadratic function. Parameters: x (float): independent variable. a (float): x^2 coefficient. b (float): x^1 coefficient. c (float): constant coefficient. Returns: (float): `f(x)=a*x^2 + b*x + c` \"\"\" return a * x * x + b * x + c get_args () Gives quadratic function parameters. Returns: Type Description Tuple [ float , float , float ] a , b and c of f(x)=a*x^2 + b*x + c . Source code in itfit/utils/quadratic.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_args ( self ): \"\"\"Gives quadratic function parameters. Returns: (Tuple[float, float, float]): `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`. \"\"\" cp_x , cp_y = self . get_xy ( * self . center_point . patch . get_center ()) lp_x , lp_y = self . get_xy ( * self . lateral_point . patch . get_center ()) a = ( lp_y - cp_y ) / np . square ( lp_x - cp_x ) b = - 2 * a * cp_x c = cp_y + a * cp_x * cp_x return a , b , c update ( * args , ** kargs ) Updates line data with DragObjects positions Source code in itfit/utils/quadratic.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" cp_x , lp_x = self . get_xdata () a , b , c = self . get_args () # create x and y data of quadratic line centered in center_point dx = abs ( lp_x - cp_x ) * 1.5 x = np . linspace ( cp_x - dx , cp_x + dx , 250 ) y = self . function ( x , a , b , c ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"Quadratic"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager","text":"Bases: DragPointCollection Collection of DragPoints representing a quadratic line. Source code in itfit/utils/quadratic.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class DragQuadraticManager ( DragPointCollection ): \"\"\"Collection of DragPoints representing a quadratic line.\"\"\" @staticmethod def function ( x , a , b , c ): \"\"\"Quadratic function. Parameters: x (float): independent variable. a (float): x^2 coefficient. b (float): x^1 coefficient. c (float): constant coefficient. Returns: (float): `f(x)=a*x^2 + b*x + c` \"\"\" return a * x * x + b * x + c def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Quadratic line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . center_point = self . dragpoints [ 0 ] self . lateral_point = self . dragpoints [ 1 ] self . update () def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" cp_x , lp_x = self . get_xdata () a , b , c = self . get_args () # create x and y data of quadratic line centered in center_point dx = abs ( lp_x - cp_x ) * 1.5 x = np . linspace ( cp_x - dx , cp_x + dx , 250 ) y = self . function ( x , a , b , c ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data ) def get_args ( self ): \"\"\"Gives quadratic function parameters. Returns: (Tuple[float, float, float]): `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`. \"\"\" cp_x , cp_y = self . get_xy ( * self . center_point . patch . get_center ()) lp_x , lp_y = self . get_xy ( * self . lateral_point . patch . get_center ()) a = ( lp_y - cp_y ) / np . square ( lp_x - cp_x ) b = - 2 * a * cp_x c = cp_y + a * cp_x * cp_x return a , b , c","title":"DragQuadraticManager"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.__init__","text":"Quadratic line between 2 DragPoints. Updates with them. Parameters: Name Type Description Default dragpoints list [ DragPoint ] line vertices. required blit_manager BlitManager used for automtic ploting. required Source code in itfit/utils/quadratic.py 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , dragpoints : list [ DragPoint ], blit_manager : BlitManager ): \"\"\"Quadratic line between 2 DragPoints. Updates with them. Args: dragpoints (list[DragPoint]): line vertices. blit_manager (BlitManager): used for automtic ploting. \"\"\" super () . __init__ ( dragpoints , blit_manager ) # name points based on use self . center_point = self . dragpoints [ 0 ] self . lateral_point = self . dragpoints [ 1 ] self . update ()","title":"__init__()"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.function","text":"Quadratic function. Parameters: Name Type Description Default x float independent variable. required a float x^2 coefficient. required b float x^1 coefficient. required c float constant coefficient. required Returns: Type Description float f(x)=a*x^2 + b*x + c Source code in itfit/utils/quadratic.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @staticmethod def function ( x , a , b , c ): \"\"\"Quadratic function. Parameters: x (float): independent variable. a (float): x^2 coefficient. b (float): x^1 coefficient. c (float): constant coefficient. Returns: (float): `f(x)=a*x^2 + b*x + c` \"\"\" return a * x * x + b * x + c","title":"function()"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.get_args","text":"Gives quadratic function parameters. Returns: Type Description Tuple [ float , float , float ] a , b and c of f(x)=a*x^2 + b*x + c . Source code in itfit/utils/quadratic.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_args ( self ): \"\"\"Gives quadratic function parameters. Returns: (Tuple[float, float, float]): `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`. \"\"\" cp_x , cp_y = self . get_xy ( * self . center_point . patch . get_center ()) lp_x , lp_y = self . get_xy ( * self . lateral_point . patch . get_center ()) a = ( lp_y - cp_y ) / np . square ( lp_x - cp_x ) b = - 2 * a * cp_x c = cp_y + a * cp_x * cp_x return a , b , c","title":"get_args()"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.update","text":"Updates line data with DragObjects positions Source code in itfit/utils/quadratic.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def update ( self , * args , ** kargs ): \"\"\"Updates line data with DragObjects positions\"\"\" cp_x , lp_x = self . get_xdata () a , b , c = self . get_args () # create x and y data of quadratic line centered in center_point dx = abs ( lp_x - cp_x ) * 1.5 x = np . linspace ( cp_x - dx , cp_x + dx , 250 ) y = self . function ( x , a , b , c ) # from data coordinates to display coordinates xy = np . array (( x , y )) . T . reshape ( - 1 , 2 ) x_data , y_data = self . set_xy ( xy ) . T # set new data self . poly . set_xdata ( x_data ) self . poly . set_ydata ( y_data )","title":"update()"}]}